<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2021/08/05/test/"/>
    <url>/2021/08/05/test/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/05/test/0.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>5.标签管理</title>
    <link href="/2021/08/03/5.%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/03/5.%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="标签管理"><a class="markdownIt-Anchor" href="#标签管理"></a> 标签管理</h1><h2 id="标签简介"><a class="markdownIt-Anchor" href="#标签简介"></a> 标签简介</h2><ul><li>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个<strong>快照</strong>。</li><li>tag相较于commit号，更好记。</li></ul><h2 id="创建标签"><a class="markdownIt-Anchor" href="#创建标签"></a> 创建标签</h2><ol><li>切换到需要打标签的分支上</li><li>输入命令<code>git tag &lt;name&gt;</code>，为该分支的最新提交打标签<ul><li>如果想要为特定提交打标签，则需要找到commit号(<code>git log</code>)</li><li>用命令<code>git tag &lt;name&gt; &lt;commit号&gt;</code></li></ul></li><li><code>git tag</code>查看所有标签<ul><li>标签不是按时间顺序列出的，而是按字母排列的</li></ul></li></ol><h3 id="相关命令"><a class="markdownIt-Anchor" href="#相关命令"></a> 相关命令</h3><ul><li><code>git show &lt;tag名字&gt;</code>：查看标签信息</li><li><code>git tag -a &lt;标签名&gt; -m &quot;xxx&quot;</code>:创建带有说明的标签</li></ul><p><strong>注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</strong></p><h2 id="操作标签"><a class="markdownIt-Anchor" href="#操作标签"></a> 操作标签</h2><h3 id="相关命令-2"><a class="markdownIt-Anchor" href="#相关命令-2"></a> 相关命令</h3><ul><li><code>git tag -d &lt;标签名&gt;</code>：删除本地仓库标签<ul><li>如果标签已经被推送到远程仓库，那先删除本地仓库标签<ul><li>用<code>git push origin :refs/tags/&lt;标签名&gt;</code></li></ul></li></ul></li><li><code>git push origin &lt;标签名&gt;</code>：推送标签到远程仓库</li><li><code>git push origin --tags</code>:一次性推送全部尚未推送到远程仓库的本地标签</li></ul>]]></content>
    
    
    <categories>
      
      <category>Git学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.分支管理</title>
    <link href="/2021/08/03/4.%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/03/4.%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="分支管理"><a class="markdownIt-Anchor" href="#分支管理"></a> 分支管理</h1><h2 id="创建与合并分支"><a class="markdownIt-Anchor" href="#创建与合并分支"></a> 创建与合并分支</h2><ul><li><p>默认本地仓库只有一条分支<code>main</code></p><ul><li><code>HEAD</code>指向<code>main</code>,<code>main</code>指向要提交的时间线</li></ul></li><li><p><code>git switch -c &lt;新分支名&gt;</code>:创建并切换新分支，指向<code>main</code>相同的提交</p><ul><li><p>此时<code>HEAD</code>指向新分支。之后的提交都是在新分支下</p><p><img src="/2021/08/03/4.%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/0.png" alt="img"></p></li></ul></li><li><p><code>git branch</code>：查看所有分支</p><ul><li>当前分支名前会有一个*号</li><li><code>-a</code>：查看本地和远程仓库所有分支</li><li><code>-r</code>：查看远程仓库分支</li></ul></li><li><p><code>git merge &lt;分支名&gt;</code>：合并指定分支的工作到当前分支下</p></li><li><p><code>git branch -d &lt;分支名&gt;</code>：删除分支</p><ul><li><code>-D</code>：删除一个没有被合并过得分支</li></ul></li></ul><h2 id="分支冲突"><a class="markdownIt-Anchor" href="#分支冲突"></a> 分支冲突</h2><ul><li><p>合并冲突：</p><ul><li><p>当创建多分支时，如果修改不同文件，则合并不会提示冲突</p></li><li><p>如果修改相同文件，合并时会提示冲突，需要手动修改冲突，确定文件的最终版本</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023000423040/0" alt="img"></p></li></ul></li><li><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容</p></li><li><p>合并策略：</p><ul><li><p>默认使用<code>Fast forward</code>，会直接将Master分支指向Develop分支。在这种模式下，删除分支后，会丢掉分支信息</p><img src="https://raw.githubusercontent.com/Syy-99/Cloud_images/img/20210803114237.png" alt="bg2012070505(1)" style="zoom:50%;"></li><li><p><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><ul><li><p>使用<code>--no-ff</code>参数后，会执行正常合并，在Master分支上生成一个新节点</p><img src="/2021/08/03/4.%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/Users\Administrator.USER-20201209JD\Desktop\bg2012070506(1).png" alt="bg2012070506(1)" style="zoom:50%;"></li></ul></li></ul></li><li><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并</p></li></ul><h2 id="分支管理策略"><a class="markdownIt-Anchor" href="#分支管理策略"></a> 分支管理策略</h2><img src="https://www.liaoxuefeng.com/files/attachments/919023260793600/0" alt="img" style="zoom: 80%;"><ul><li><p><mark>主分支main(master)</mark>:代码库应该有一个、且仅有一个主分支。仅用来发布新版本，平时不能在上面干活.</p></li><li><p><mark>工作分支dev</mark>：日常开发。如果想正式对外发布，就在分支上，对Develop分支进行&quot;合并&quot;</p></li><li><p><strong>临时分支</strong>：</p><ul><li><p><mark>功能分支feature-xxx</mark>：为了开发某种特定功能，从<code>dev分支</code>上面分出来的。开发完成后，要再并入dev</p><img src="/2021/08/03/4.%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/Users\Administrator.USER-20201209JD\Desktop\d4806f137df9563d148afb17a51a1134_bg2012070507.png" alt="d4806f137df9563d148afb17a51a1134_bg2012070507" style="zoom:50%;"></li><li><p><mark>预发布分支release-xxx</mark>：指发布正式版本之前（即合并到<code>main分支</code>之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从<code>dev分支</code>上面分出来的，预发布结束以后，必须合并进<code>dev和main分支</code>.</p></li><li><p><mark>修补bug分支fixbug-xxx</mark>：修补bug分支是从<code>main分支</code>上面分出来的。修补结束以后，再合并进<code>main和dev分支</code></p><ul><li><p>bug突然出现，如何保存当前的工作?恢复工作？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs she">git stash//把当前工作现场“储藏”起来，等以后恢复现场后继续工作<br>git stash list//查看该分支保存的状态<br>git stash pop//在该分支下，恢复之前保存的状态，并删除该记录<br>git stash apply &lt;名字&gt;//恢复指定的状态<br></code></pre></td></tr></table></figure></li><li><p>修补<code>main分支</code>后，如何在<code>dev分支</code>上进行同样的修改操作？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">git chery-pick &lt;commit编号&gt;//复制一个特定的提交到当前分支<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="多人协作"><a class="markdownIt-Anchor" href="#多人协作"></a> 多人协作</h2><ul><li><p>当从远程仓库克隆时，实际上Git自动把本地的<code>main</code>分支和远程的<code>main</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code></p></li><li><p>分支推送策略：</p><ul><li><code>main</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul></li><li><p>工作模式：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li></ol></li></ul><ol start="2"><li><p>如果推送失败，则因为远程分支比你的本地新，需要先用<code>git pull</code>试图合并；</p><ul><li>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</li></ul></li><li><p>如果合并有冲突，则解决冲突，并在本地提交；</p><ul><li>用<code>git status</code>查看当前状态、寻找冲突的文件，手动修改</li></ul></li><li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p></li></ol><h2 id="rebase"><a class="markdownIt-Anchor" href="#rebase"></a> rebase ???</h2><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h2 id="相关命令"><a class="markdownIt-Anchor" href="#相关命令"></a> 相关命令</h2><ul><li><code>git remote</code>：查看远程库的信息<ul><li><code>-v</code>：显示更详细的信息，显示可以抓取和推送的地址</li></ul></li><li><code>git push origin --delete &lt;远程分支名&gt;</code>：删除远程分支<ul><li><code>git clone -b &lt;指定分支名&gt; &lt;远程仓库地址&gt;</code>：克隆远程库指定分支到本地库</li></ul></li></ul><p><strong>扩展阅读</strong></p><ul><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html">Git分支管理策略</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.自定义Git</title>
    <link href="/2021/08/03/6.%E8%87%AA%E5%AE%9A%E4%B9%89Git/"/>
    <url>/2021/08/03/6.%E8%87%AA%E5%AE%9A%E4%B9%89Git/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义git"><a class="markdownIt-Anchor" href="#自定义git"></a> 自定义Git</h1><h2 id="配置git"><a class="markdownIt-Anchor" href="#配置git"></a> 配置Git</h2><ul><li><code>git config --global user.name &quot;xxx&quot;</code>配置每次提交记录名称<br><code>git config --global user.email &quot;email@example.com&quot;</code>配置每次提交个人信息</li><li><code>git config --global color.ui true</code>：让Git显示颜色</li></ul><h2 id="忽略特殊文件"><a class="markdownIt-Anchor" href="#忽略特殊文件"></a> 忽略特殊文件</h2><ul><li><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol></li><li><p>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件</p><ul><li>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git</li><li>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查</li></ul></li><li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p></li><li><p>把指定文件排除在<code>.gitignore</code>规则外的写法就是<code>!</code>+文件名</p></li></ul><h2 id="配置别名"><a class="markdownIt-Anchor" href="#配置别名"></a> 配置别名</h2><ul><li><code>git config --global alias.&lt;别名&gt; &lt;实际名字&gt;</code></li><li>每个仓库的Git配置文件都放在<code>.git/config</code>文件中,别名就在<code>[alias]</code>后面</li></ul><h2 id="搭建git服务器"><a class="markdownIt-Anchor" href="#搭建git服务器"></a> 搭建Git服务器</h2><p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p><p>假设你已经有<code>sudo</code>权限的用户账号，下面，正式开始安装。</p><ul><li>第一步，安装<code>git</code>：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> install git<br></code></pre></td></tr></table></figure><ul><li>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo adduser git<br></code></pre></td></tr></table></figure><ul><li>第三步，创建证书登录：</li></ul><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><ul><li>第四步，初始化Git仓库：</li></ul><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ sudo git init <span class="hljs-comment">--bare sample.git</span><br></code></pre></td></tr></table></figure><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo chown -R <span class="hljs-symbol">git:</span>git sample.git<br></code></pre></td></tr></table></figure><ul><li>第五步，禁用shell登录：</li></ul><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">git:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/git</span><span class="hljs-symbol">:/bin/bash</span><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">git:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/git</span><span class="hljs-symbol">:/usr/bin/git-shell</span><br></code></pre></td></tr></table></figure><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><ul><li>第六步，克隆远程仓库：</li></ul><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git clone git@&lt;服务器地址&gt;<span class="hljs-symbol">:/srv/sample</span>.git<br>Cloning into <span class="hljs-string">&#x27;sample&#x27;</span>...<br><span class="hljs-symbol">warning:</span> You appear to have cloned an empty repository.<br></code></pre></td></tr></table></figure><p>剩下的推送就简单了。</p><h3 id="管理公钥"><a class="markdownIt-Anchor" href="#管理公钥"></a> 管理公钥</h3><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://github.com/res0nat0r/gitosis">Gitosis</a>来管理公钥。</p><p>这里我们不介绍怎么玩<a href="https://github.com/res0nat0r/gitosis">Gitosis</a>了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p><h3 id="管理权限"><a class="markdownIt-Anchor" href="#管理权限"></a> 管理权限</h3><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a href="https://github.com/sitaramc/gitolite">Gitolite</a>就是这个工具。</p><p>这里我们也不介绍<a href="https://github.com/sitaramc/gitolite">Gitolite</a>了，不要把有限的生命浪费到权限斗争中。</p>]]></content>
    
    
    <categories>
      
      <category>Git学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1047</title>
    <link href="/2021/07/28/LeetCode%201047/"/>
    <url>/2021/07/28/LeetCode%201047/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1047"><a class="markdownIt-Anchor" href="#leetcode-1047"></a> LeetCode 1047</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/</a></li><li>从string中删除所有相邻且相同的字符，删除后继续重复操作</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>想当于两个元素的匹配问题，考虑用栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        stack&lt;<span class="hljs-keyword">char</span>&gt; sk;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;s[i];i++)&#123;<br>            <span class="hljs-keyword">if</span>(!sk.<span class="hljs-built_in">empty</span>()&amp;&amp;sk.<span class="hljs-built_in">top</span>()==s[i])  sk.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//这里要加非空判断，因为后续也可能出现栈为空的情况</span><br>            <span class="hljs-keyword">else</span> sk.<span class="hljs-built_in">push</span>(s[i]);<br>        &#125;<br>        string p=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span>(!sk.<span class="hljs-built_in">empty</span>())&#123;<br>            p+=sk.<span class="hljs-built_in">top</span>();<br>            sk.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(p.<span class="hljs-built_in">begin</span>(),p.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 454</title>
    <link href="/2021/07/28/LeetCode%20454/"/>
    <url>/2021/07/28/LeetCode%20454/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-454"><a class="markdownIt-Anchor" href="#leetcode-454"></a> LeetCode 454</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><a href="https://leetcode-cn.com/problems/4sum-ii/">https://leetcode-cn.com/problems/4sum-ii/</a></li><li>给定四个数组，从四个数组中各选一个，相加等于0</li><li>返回可选的组合的个数</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>四个不同的数组中选，所以是各自独立的</p></li><li><p>返回可选的组合的个数，只需进行记录即可</p></li><li><p>综上，可以使用哈希法。考虑到四个数组，如果暴力求解大概率是超时，所以我们将两个数组的组合情况保存起来，再循环解决</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums2, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums3, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums4)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a:nums1)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b:nums2)&#123;<br>                mp1[a+b]++;<span class="hljs-comment">//先记录两个数组的所有情况，因为最终结果只要数量，所以只要记录可以组合的值的数量即可</span><br>            &#125;<br>        &#125;<br>       <span class="hljs-comment">// unordered_map&lt;int,int&gt; mp2;</span><br>       <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a:nums3)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b:nums4)&#123;<span class="hljs-comment">//另外两个数组排列组合</span><br>                <span class="hljs-keyword">if</span>(mp1.<span class="hljs-built_in">find</span>(<span class="hljs-number">0</span>-(a+b))!=mp1.<span class="hljs-built_in">end</span>())&#123;<span class="hljs-comment">//找期望有的值</span><br>                    count+=mp1[<span class="hljs-number">0</span>-(a+b)];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br> <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 239</title>
    <link href="/2021/07/28/LeetCode%20239/"/>
    <url>/2021/07/28/LeetCode%20239/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-239"><a class="markdownIt-Anchor" href="#leetcode-239"></a> LeetCode 239</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></li><li>给定一个整形数组，固定滑动窗口长度，窗口从左到右每次滑动一个元素，返回每次窗口的最大值</li></ul><h2 id="思路1"><a class="markdownIt-Anchor" href="#思路1"></a> 思路1</h2><ul><li><p>滑动窗口的模拟，容易想到使用队列</p></li><li><p>难点是如何找到每次窗口的最大值，如果在次窗口中暴力求解，O（N^2）会超时。考虑最好在每次窗口滑动时，就能确定最大值。</p></li><li><p>找最大值需要比较排序，考虑<mark>优先队列</mark>可以确保每次最大值都在窗口的第一个。问题又来了，因为排序后数字的位置改变，每次移出窗口的数不一定是优先队列中最左边的数，如何来确认呢？</p></li><li><p>因为我们只需要找到每次的最大值，<strong>不需要关心队列里到底有哪些数字</strong>。而最大值永远在优先队列的最左边，我们只需判断每次移动后，该最大值是否被移出队列即可。</p><p>每次移出窗口的数组下标是确定的，所以我们可以同时保存值和下标，这样就算排序后数组位置改变，我们还是可以确定是否目前的最大值是否被移出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        priority_queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; q;<span class="hljs-comment">//同时保存值和下标</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>            q.<span class="hljs-built_in">emplace</span>(nums[i], i);<br>        &#125;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; ans = &#123;q.<span class="hljs-built_in">top</span>().first&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k; i &lt; n; ++i) &#123;<br>            q.<span class="hljs-built_in">emplace</span>(nums[i], i);<br>            <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">top</span>().second &lt;= i - k) &#123;<span class="hljs-comment">//i-k之前的数都是应该被移出的</span><br>                q.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            ans.<span class="hljs-built_in">push_back</span>(q.<span class="hljs-built_in">top</span>().first);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//时间：O(nlogn) 空间：O(n)</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="思路2"><a class="markdownIt-Anchor" href="#思路2"></a> 思路2</h2><ul><li><p><strong>其实队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了</strong></p><ul><li>如果当前的滑动窗口中有两个下标 i 和 j，其中 i 在 j 的左侧（i &lt; j），并且 i 对应的元素不大于 j 对应的元素（nums[i]≤nums[j]）</li><li>当窗口右移时，如果 i 还在窗口，j 一定在窗口，且此时最大值不可能是nums[i]</li><li>按照上述分析，所有num[i]就可以不用保存在队列中了</li></ul></li><li></li></ul>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; result;<br>        deque&lt;<span class="hljs-keyword">int</span>&gt; dq;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            <span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>()&amp;&amp;nums[i]&gt;dq.<span class="hljs-built_in">back</span>())&#123;<span class="hljs-comment">//按上述分析 保存特定顺序下的窗口元素</span><br>                dq.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            dq.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>        &#125;<br>       result.<span class="hljs-built_in">push_back</span>(dq.<span class="hljs-built_in">front</span>());<span class="hljs-comment">//第一个窗口的最大值</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!dq.<span class="hljs-built_in">empty</span>()&amp;&amp;nums[i-k]==dq.<span class="hljs-built_in">front</span>())<span class="hljs-comment">//num[i-k]是窗口该移出的元素，判断是否等于队列最前面的值，如果相等则表示其会被移出窗口</span><br>            dq.<span class="hljs-built_in">pop_front</span>();why???<br>        <span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>()&amp;&amp;nums[i]&gt;dq.<span class="hljs-built_in">back</span>())<span class="hljs-comment">//只要添加数字进窗口都进行该操作</span><br>            dq.<span class="hljs-built_in">pop_back</span>();<br>            dq.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>        result.<span class="hljs-built_in">emplace_back</span>(dq.<span class="hljs-built_in">front</span>());    <span class="hljs-comment">//每次移动完后，队列最前面的值，就是此时窗口的最大值  why??</span><br>       &#125;<br>       <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><ul><li><mark>有两处问题需要考虑</mark></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 142</title>
    <link href="/2021/07/28/LeetCode%20142/"/>
    <url>/2021/07/28/LeetCode%20142/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-142"><a class="markdownIt-Anchor" href="#leetcode-142"></a> LeetCode 142</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li>在一个链表中，确定是否有环。如果有，确定环的起始结点位置</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>确定有环：快慢指针法</p></li><li><p>确定环起始位置：<img src="/2021/07/28/LeetCode%20142/%5C%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%5C%E7%8E%AF.png" alt="环"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">(x+y)*<span class="hljs-number">2</span>=(x+y)+<span class="hljs-built_in">n</span>(<span class="hljs-comment">y+z</span>)//这里<span class="hljs-built_in">n</span>(<span class="hljs-comment">y+z</span>)是快指针多走的<br>x=<span class="hljs-built_in">n</span>(<span class="hljs-comment">y+z</span>)-y=(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>)(y+z)+z//x是我们要求的<br>注意到（<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>)(y+z)是环的长度，z、x分别拿出来看就可知道如何找到入口<br></code></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode* slow=head;<br>        ListNode* fast=head;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-comment">//注意判断</span><br>            slow=slow-&gt;next;<span class="hljs-comment">//慢指针</span><br>            fast=fast-&gt;next-&gt;next;<span class="hljs-comment">//快指针</span><br>            <span class="hljs-keyword">if</span>(slow==fast)&#123; <span class="hljs-comment">//有环</span><br>                flag=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;    <br>        &#125;<br>        <span class="hljs-comment">//这部分，可以直接放在前面的if里面的</span><br>        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode* temp=head;<br>        <span class="hljs-keyword">while</span>(temp!=fast)&#123;<br>            fast=fast-&gt;next;<br>            temp=temp-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 76</title>
    <link href="/2021/07/28/LeetCode%2076/"/>
    <url>/2021/07/28/LeetCode%2076/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-76"><a class="markdownIt-Anchor" href="#leetcode-76"></a> LeetCode 76</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>​题目要求在一个字符串中找到包含另一个字符串所有字符（包括重复字符）的最短子序列</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>子序列问题，考虑<mark>滑动窗口</mark>思想</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l1=s.<span class="hljs-built_in">length</span>(),l2=t.<span class="hljs-built_in">length</span>();  <span class="hljs-comment">//获得字符串长度</span><br>    <span class="hljs-comment">//做准备，能想d</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mp</span><span class="hljs-params">(<span class="hljs-number">128</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;t.<span class="hljs-built_in">length</span>();j++)<br>        mp[t[j]]++;<br><span class="hljs-keyword">int</span> kind=l2;<br><br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//保存每次结果和最终结果</span><br>        <span class="hljs-keyword">int</span> result=INT_MAX;<br>string str=<span class="hljs-string">&quot;&quot;</span>;<br>string str2=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;l1;j++)&#123;<br>            <span class="hljs-comment">//窗口滑动操作</span><br>        str+=s[j];<span class="hljs-comment">//记录窗口目前数据</span><br><span class="hljs-keyword">if</span>(mp[s[j]]&gt;<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//窗口滑动对之后操作影响的记录</span><br>kind--;<br>&#125;<br>mp[s[j]]--;<br> <br>            <span class="hljs-keyword">while</span>(kind==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//临界情况</span><br>            <br><span class="hljs-keyword">int</span> ans=j-i+<span class="hljs-number">1</span>;<br>str2=result&gt;ans?str:str2;<br>result=result&gt;ans?ans:result;<br>                <span class="hljs-comment">//窗口起始位置向前滑动对记录的影响</span><br>mp[s[i]]++;<br><span class="hljs-keyword">if</span>(mp[s[i]]&gt;<span class="hljs-number">0</span>)&#123;<br>kind++;<br>&#125;<br>str.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>i++;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str2;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>对于此题，也可以不用每次记录窗口中的字符串，因为最后可以得到最终窗口的起始、终止位置。</p></li><li><p>对于此题，还可优化，窗口起始位置可以不用每次只滑动一次，可以直接将窗口前面和目标字符串无关的位置全部移动后再做进一步判断</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 69</title>
    <link href="/2021/07/28/LeetCode%2069/"/>
    <url>/2021/07/28/LeetCode%2069/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-69"><a class="markdownIt-Anchor" href="#leetcode-69"></a> LeetCode 69</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>​模拟sqrt函数实现</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>对于一个整数的平方根，除了几个特殊情况，可以验证&lt;=x/2。这里强调是整数，所以2,3仍然符合，而0,1则要特殊处理。</p></li><li><p>使用二分法，while循环中的if条件要注意，如果mid*mid&gt;x,那么结果在mid之后；反正则不一定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> start=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> end=x/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(end&gt;=start)&#123;<br>        <span class="hljs-keyword">int</span> mid=start+(end-start)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)mid*mid&gt;x)<span class="hljs-comment">//比x大，那么一定在前面</span><br>            end=mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//&lt;=x，不一定先记录下来</span><br>            ans=mid;<span class="hljs-comment">//可能的结果先保存下来，所以end可以等于start</span><br>            start=mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//继续二分</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br></code></pre></td></tr></table></figure></li><li><p>如果不用x/2,那么就不需要特殊情况单独处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> start=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> end=x;<span class="hljs-comment">//v</span><br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(end&gt;=start)&#123;<br>        <span class="hljs-keyword">int</span> mid=start+(end-start)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)mid*mid&gt;x)<br>            end=mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans=mid;<br>            start=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br> &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 59</title>
    <link href="/2021/07/28/LeetCode%2059/"/>
    <url>/2021/07/28/LeetCode%2059/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-59"><a class="markdownIt-Anchor" href="#leetcode-59"></a> LeetCode 59</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>​输入n，在n*n的矩阵中，从左上角开始，逆时针填入数字1-n<sup>2</sup>,然后输出矩阵</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>首页，应该能知道这题是一个模拟题</p></li><li><p>手动模拟操作，可以发现，顺序上-右-下-左都是一样的，只是规模再变小。所以一次大循环里面，应该是把四个方向的任务完成。</p></li><li><p>还要注意的是边界的选取，因为上-右、右-下、下-左，均是存在一个重叠的数字的。这里选择左闭右开，是因为每次处理一个方向后，循环变量还会加一，</p><p>所以干脆直接将加一利用起来，再之后的方向继续使用，减少操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">generateMatrix</span>(<span class="hljs-keyword">int</span> n) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt; &gt; <span class="hljs-built_in">result</span>(n, vector&lt;<span class="hljs-keyword">int</span>&gt;(n, <span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">int</span> loop=n/<span class="hljs-number">2</span>;<span class="hljs-comment">//一次一圈，所以除2</span><br>        <span class="hljs-keyword">int</span> startx=<span class="hljs-number">0</span>,starty=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录起始位置</span><br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<span class="hljs-comment">//数字增量</span><br>        <span class="hljs-keyword">int</span> offset=<span class="hljs-number">1</span>;<span class="hljs-comment">//相同循环操作的偏移量</span><br>        <span class="hljs-keyword">while</span>(loop--)&#123;<br>            i=startx;<br>            j=starty;<br>            <span class="hljs-keyword">for</span>(;j&lt;n-offset+startx;j++)<span class="hljs-comment">//注意j的范围是要有偏移量的</span><br>                result[i][j]=ans++;<br><span class="hljs-comment">//因为采用左闭右开，所以j最后加出来的数，可以在下面的循环里直接用</span><br>            <span class="hljs-keyword">for</span>(;i&lt;n-offset+startx;i++)<br>                result[i][j]=ans++;<br>                <br>            <span class="hljs-keyword">for</span>(;j&gt;starty;j--)<br>                result[i][j]=ans++;<br>           <br>            <span class="hljs-keyword">for</span>(;i&gt;startx;i--)<br>                result[i][j]=ans++;<br>            <span class="hljs-comment">//下一轮作准备</span><br>            startx++;<br>            starty++;<span class="hljs-comment">//起始位置改变</span><br>            offset+=<span class="hljs-number">2</span>;<span class="hljs-comment">//偏移量改变</span><br>        &#125;<br>         <span class="hljs-keyword">if</span> (n%<span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//n是奇数，则存在一个正中间数会少loop一次，需要额外处理</span><br>            result[n/<span class="hljs-number">2</span>][n/<span class="hljs-number">2</span>] = ans;<br>        &#125;<br>        <span class="hljs-keyword">return</span>  result;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 34</title>
    <link href="/2021/07/28/LeetCode%2034/"/>
    <url>/2021/07/28/LeetCode%2034/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-34"><a class="markdownIt-Anchor" href="#leetcode-34"></a> LeetCode 34</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>​题目给定一个升序数组，又要求时间复杂度O(log n)算法，考虑<mark>二分</mark>解决</p><h2 id="思路1"><a class="markdownIt-Anchor" href="#思路1"></a> 思路1</h2><ul><li><p>一般二分查找，只能找到其中一个target，现在要找target在数组中的开始位置和终止位置，考虑每次找到后将数组分成左右两个，那么开始、终止位置也就可能在左右两边。</p></li><li><p>对左右两边，可以继续二分查找，直到找不到停止。到这里，考虑<mark>递归</mark>思想。</p></li><li><p>对于递归函数，<strong>返回值应该就是最终的结果</strong>，还要注意临界条件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">find</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums,<span class="hljs-keyword">int</span> target,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<span class="hljs-comment">//这里l,r就是用来记录最终结果用</span><br>         <span class="hljs-keyword">while</span>(r&gt;=l)&#123;  <br>         <span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;target)<br>                r=mid<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;target)<br>                l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//找到一个边界target</span><br>                <span class="hljs-keyword">if</span>(nums[l]!=target)<span class="hljs-comment">//如果最左边不等于target</span><br>                    l=<span class="hljs-built_in">find</span>(nums,target,l+<span class="hljs-number">1</span>,mid)[<span class="hljs-number">0</span>];<span class="hljs-comment">//左边往后移动，只取数组第一个结果</span><br>                <span class="hljs-keyword">if</span>(nums[r]!=target)<span class="hljs-comment">//如果最右边不等于target</span><br>                    r=<span class="hljs-built_in">find</span>(nums,target,mid,r<span class="hljs-number">-1</span>)[<span class="hljs-number">1</span>];<span class="hljs-comment">//右边后前移动</span><br>                <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&#123;l,r&#125;;<br>            &#125;<br>        &#125;<br>         <span class="hljs-comment">//如果找不到 </span><br>        <span class="hljs-keyword">return</span>  vector&lt;<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(nums,target,<span class="hljs-number">0</span>,nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="思路二"><a class="markdownIt-Anchor" href="#思路二"></a> 思路二</h2><ul><li>考虑到传入的是vector<int>类型，而c++STL中存在一个<mark>二分查找</mark>的算法<code>equal_range</code>,可以使用该函数</int></li><li><mark>equal_range</mark>：试图在已排序的[first,last)中寻找value，它返回一对迭代器i和j，其中i是在不破坏次序的前提下，<strong>value可插入的第一个位置（亦即lower_bound）</strong>，j则是在不破坏次序的前提下，<strong>value可插入的最后一个位置（亦即upper_bound）</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> bound=<span class="hljs-built_in">equal_range</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),target);<br>        <span class="hljs-keyword">if</span>(bound.first==bound.second)   <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<span class="hljs-comment">//两个迭代器 first second</span><br>        <span class="hljs-keyword">return</span> &#123;(<span class="hljs-keyword">int</span>)(bound.first-nums.<span class="hljs-built_in">begin</span>()),(<span class="hljs-keyword">int</span>)(bound.second-nums.<span class="hljs-built_in">begin</span>())<span class="hljs-number">-1</span>&#125;;<span class="hljs-comment">//通过迭代器相减 q</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 19</title>
    <link href="/2021/07/28/LeetCode%2019/"/>
    <url>/2021/07/28/LeetCode%2019/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-19"><a class="markdownIt-Anchor" href="#leetcode-19"></a> LeetCode 19</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 18</title>
    <link href="/2021/07/28/LeetCode%2018/"/>
    <url>/2021/07/28/LeetCode%2018/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-18"><a class="markdownIt-Anchor" href="#leetcode-18"></a> LeetCode 18</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><a href="https://leetcode-cn.com/problems/4sum/">https://leetcode-cn.com/problems/4sum/</a></li><li>给你一个数组和一个目标值target，判断数组中是否能找到四个不同位置的值相加等于target</li><li>答案中不包含重复的集合</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>和之前[3Sum](LeetCode <a href="http://15.md">15.md</a>)基本相同，只是需要四个数字</p></li><li><p>指针数：2个活动指针+2个固定移动指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">fourSum</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; result;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">int</span> L=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;L;i++)&#123;<br>            <span class="hljs-comment">//if(nums[i]&gt;target)  continue;这个剪枝是错误的</span><br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//相同的去重操作</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;L;j++)&#123;<span class="hljs-comment">//两个固定指针，两重循环</span><br>                <span class="hljs-keyword">if</span>(j&gt;i+<span class="hljs-number">1</span>&amp;&amp;nums[j]==nums[j<span class="hljs-number">-1</span>]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//注意一下第二重循环的去重条件</span><br>                <span class="hljs-keyword">int</span> left=j+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">int</span> right=L<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">while</span>(right&gt;left)&#123;<br>                    <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> )nums[i]+nums[j]+nums[left]+nums[right]&gt;target)<span class="hljs-comment">//这里的类型v</span><br>                        right--;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> )nums[i]+nums[j]+nums[left]+nums[right]&lt;target)<br>                        left++;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        result.<span class="hljs-built_in">push_back</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&#123;nums[i], nums[j], nums[left],nums[right]&#125;);<br>                        <span class="hljs-keyword">while</span>(nums[right]==nums[right<span class="hljs-number">-1</span>]&amp;&amp;right&gt;left) right--;<br>                        <span class="hljs-keyword">while</span>(nums[left]==nums[left+<span class="hljs-number">1</span>]&amp;&amp;right&gt;left) left++;<br>                        right--;<br>                        left++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>​</p></li></ul><p>​</p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 15</title>
    <link href="/2021/07/28/LeetCode%2015/"/>
    <url>/2021/07/28/LeetCode%2015/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-15"><a class="markdownIt-Anchor" href="#leetcode-15"></a> LeetCode 15</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><a href="https://leetcode-cn.com/problems/3sum">https://leetcode-cn.com/problems/3sum</a></li><li>从一个数组中，找到所有的三个不同位置的数字，相加等于0</li><li>返回所有的相加等于0的三个数字，且结果不重复</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>理解题目要求，三个数字位置要不同,三个数字组成的结果不重复，最后按组返回所有的三个数字</p></li><li><p>返回最终集合不能重复，所以这题不好用哈希法，因为哈希会把所有的结果都选出来，那么就可能三个数字组成的集合是重复的</p><p>所以，考虑多指针法，而正好题目只需我们返回最终的值，那么可以将数据排序</p></li><li><p>如何确定指针数？</p><ul><li>首页一个排好序的数组，指针的移动方向就两个——前、后，所以移动指针可以有两个</li><li>这题要求选三个，所以我们当然要选三个指针指向最终的结果</li></ul></li><li><p>如何去重？</p><ul><li><p>因为排好序，所以相同的数据都集中在一起，只需判断此时的数据和之前的数据是否相同</p><p>如果相同，则不处理该数据；</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; result;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//排序</span><br>        <span class="hljs-keyword">int</span> L=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;L;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//剪枝</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> k=L<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//去重</span><br>            <span class="hljs-keyword">while</span>(k&gt;j)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] + nums[j] + nums[k]&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//移动指针</span><br>k--;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[i] + nums[j] + nums[k]&lt;<span class="hljs-number">0</span>)<br>j++;<br><span class="hljs-keyword">else</span>&#123;<br>result.<span class="hljs-built_in">push_back</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&#123;nums[i], nums[j], nums[k]&#125;);<span class="hljs-comment">//获得结果</span><br><span class="hljs-keyword">while</span>(nums[k]==nums[k<span class="hljs-number">-1</span>]&amp;&amp;k&gt;j)   k--;<span class="hljs-comment">//去重</span><br>                    <span class="hljs-keyword">while</span>(nums[j]==nums[j+<span class="hljs-number">1</span>]&amp;&amp;k&gt;j)   j++;<br><span class="hljs-comment">//继续寻找</span><br>                    j++;<br>                    k--;<br>&#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1</title>
    <link href="/2021/07/28/LeetCode%201/"/>
    <url>/2021/07/28/LeetCode%201/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1"><a class="markdownIt-Anchor" href="#leetcode-1"></a> LeetCode 1</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></li><li>给定一个整数数组和一个target,从数组中选择两个相加等于target的值，返回选择的两个的数组下标</li><li>同一个元素不能被重复选,且只会有一个结果</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li><p>返回下标，说明不能排序，那么不能使用多指针法；</p></li><li><p>题目只是要求，同一个元素不能被重复选，并没有说最终结果中不能有重复的元素，所以可以使用哈希法或<code>find()</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//方法一 find()函数找，时间复杂度高</span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=target-nums[i];<br>        <span class="hljs-keyword">auto</span> index=<span class="hljs-built_in">find</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),temp);<br>        <span class="hljs-keyword">int</span> t=index-nums.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">if</span>(index!=nums.<span class="hljs-built_in">end</span>()&amp;&amp;t!=i)&#123;<span class="hljs-comment">//确保不是同一元素</span><br>            <span class="hljs-keyword">return</span> &#123;i,t&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//方法二 哈希法</span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    unordered_map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>        mp[nums[i]]=i+<span class="hljs-number">1</span>;    <span class="hljs-comment">//记录索引，这题题目明确说 只有一个答案才可以这样做的</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=mp[target-nums[i]];<br>        <span class="hljs-keyword">if</span>(temp!=<span class="hljs-number">0</span>&amp;&amp;temp<span class="hljs-number">-1</span>!=i)&#123;     /<br>            <span class="hljs-keyword">return</span> &#123;i,temp<span class="hljs-number">-1</span>&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-comment">/*官方题解 哈希</span><br><span class="hljs-comment"> 注意和自己的方法二的不同，方法二是针对此题明确一个答案才可以那样。</span><br><span class="hljs-comment"> 因为法二在记录索引是，相同的nums[i]的值会被覆盖，之会存在一个索引。</span><br><span class="hljs-comment"> 但是，因为只有一个答案，所以如果有相同的值，那么要么是用不到的，要么一定是两个相同值就是最终的答案；否则不可能只有一个解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; hashtable;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">auto</span> it = hashtable.<span class="hljs-built_in">find</span>(target - nums[i]);<br>            <span class="hljs-keyword">if</span> (it != hashtable.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> &#123;it-&gt;second, i&#125;;<br>            &#125;<br>            hashtable[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++函数使用记录</title>
    <link href="/2021/07/28/c++%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/07/28/c++%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="c函数使用记录"><a class="markdownIt-Anchor" href="#c函数使用记录"></a> c++函数使用记录</h1><h2 id="stl-函数"><a class="markdownIt-Anchor" href="#stl-函数"></a> STL 函数</h2><ul><li><p><code>equal_range()</code>：一个<mark>二分查找</mark>的算法，试图在<mark>已排序</mark>的[first,last)中寻找value，它返回一对<mark>迭代器i和j</mark>。</p><ul><li><p>如果该键值在<mark>容器</mark>中存在，则i是在<strong>不破坏次序的前提下</strong>，value可插入的第一个位置（亦即lower_bound），j是在<strong>不破坏次序的前提下</strong>，value可插入的最后一个位置（亦即upper_bound）；如果找不到，则i,j都指向此键值应该插入的位置。</p></li><li><p>C++11 简便写法 <code>auto bounds = equal_range(nums.begin(), nums.end(), target);</code></p></li><li><p>可以将其看做<code>lower_bound</code>和<code>upper_bound</code>的结合</p></li><li><p><code>vector map</code>都可以用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector: <span class="hljs-built_in">equal_range</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), target);<br>map:<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>distance()</code>：计算迭代器之间的距离</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> dis=<span class="hljs-built_in">distance</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>()<br></code></pre></td></tr></table></figure></li><li><p><code>remove()</code>：移除区间{beg,end)中每一个“与value相等”的元素。最后remove返回指向“目标数列”的end()的迭代器</p><ul><li>只会移动元素，并且也不是将vlaues移到最后面去</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vcetor:<span class="hljs-built_in">remove</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),value);<br></code></pre></td></tr></table></figure></li><li><p><code>Remove_if()</code>：移除区间[beg,end)中每一个“令判断式获得true”的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x==target; &#125;<br>vcetor:<span class="hljs-built_in">remove</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),isValue);<br></code></pre></td></tr></table></figure></li><li><p><code>erase()</code>:删除<mark>容器</mark>中的某些元素，返回经过删除操作后的容器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">erase</span>(iter);<br><span class="hljs-built_in">erase</span>(iter.begin,iter.end)<span class="hljs-comment">/** iter代表迭代器 **/</span><br></code></pre></td></tr></table></figure></li><li><p><code>fill()</code>：为某容器某个区间赋相同值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vcetor:<span class="hljs-built_in">fill</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>find(first, end, value)</code>：返回区间[first，end）中第一个值等于value的元素位置；若未找到，返回end。函数返回的是迭代器或指针，即位置信息</p><ul><li>如果查找整个区间，可以直接<code>xx.find(value)</code></li></ul></li><li><p><code>reverse(begin,end)</code>：反转</p><ul><li>多用于string、vector</li></ul></li><li><p><code>replace(begin,end,x,xx)</code>:在容器[being,end)范围内，将所有的x替换为xxx</p><ul><li><code>replace_if(being,end,条件判断,xxx)</code></li></ul></li></ul><h2 id="string-函数"><a class="markdownIt-Anchor" href="#string-函数"></a> String 函数</h2><ul><li><p><code>str.replace()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">str.<span class="hljs-built_in">replace</span>(pos,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;#&quot;</span>)<span class="hljs-comment">//从位置pos开始的两个字符替换成#</span><br>str.<span class="hljs-built_in">replace</span>(<span class="hljs-built_in">begin</span>(),<span class="hljs-built_in">end</span>(),<span class="hljs-string">&quot;#&quot;</span>)<span class="hljs-comment">//[begin,end)的字符替换成&quot;#&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>str.substr(begin,length)</code>：从索引begin开始，截取长度为length的字符</p></li><li><p><code>stoi(stirng s)</code>：将用字符串表示的数字转换为<code>Int</code></p><ul><li>非数字字符转换会报错</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>语法总结</title>
    <link href="/2021/07/28/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/"/>
    <url>/2021/07/28/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="语法总结队列"><a class="markdownIt-Anchor" href="#语法总结队列"></a> 语法总结——队列</h1><h2 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h2><h2 id="优先队列"><a class="markdownIt-Anchor" href="#优先队列"></a> 优先队列</h2><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><p><code>#include&lt;queue&gt;</code></p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><ul><li>在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征</li><li>优先队列具有队列的所有特性，包括队列的基本操作，只是在这基础上添加了内部的一个排序，<strong>它本质是一个堆实现的</strong></li></ul><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Type： 数据类型</span><br><span class="hljs-comment">Container: 容器类型（必须是用数组实现的容器，vector,deque等，不能用List）</span><br><span class="hljs-comment">Functional: 比较的方式</span><br><span class="hljs-comment">*/</span><br>priority_queue&lt;Type, Container, Functional&gt;<br></code></pre></td></tr></table></figure><ul><li><p>对于基本类型，默认使用大顶堆</p></li><li><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-keyword">int</span>&gt; a;<br>priority_queue &lt;<span class="hljs-keyword">int</span>,vector&lt;<span class="hljs-keyword">int</span>&gt;,greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; q;<span class="hljs-comment">//主动声明 小顶堆</span><br>priority_queue&lt;string&gt; b<br>priority_queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; a<span class="hljs-comment">//pair先比较第一个</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="基本操作函数"><a class="markdownIt-Anchor" href="#基本操作函数"></a> 基本操作函数</h3><table><thead><tr><th style="text-align:left">函数</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:left">top</td><td>访问队头元素</td></tr><tr><td style="text-align:left">empty</td><td>队列是否为空</td></tr><tr><td style="text-align:left">size</td><td>返回队列内元素个数</td></tr><tr><td style="text-align:left">push</td><td>插入元素到队尾 (并排序)</td></tr><tr><td style="text-align:left">pop</td><td>弹出队头元素</td></tr><tr><td style="text-align:left">swap</td><td>交换内容</td></tr></tbody></table><h3 id="进阶操作"><a class="markdownIt-Anchor" href="#进阶操作"></a> 进阶操作</h3><ul><li><p>自定义类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//方法1</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp1</span> //运算符重载&lt;</span><br>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-built_in">tmp1</span>(<span class="hljs-keyword">int</span> a) &#123;x = a;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> tmp1&amp; a) <span class="hljs-keyword">const</span><span class="hljs-comment">//注意这里重载 &lt;</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> x &lt; a.x; <span class="hljs-comment">//大顶堆</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//方法2</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tmp2</span> //重写仿函数</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(tmp1 a, tmp1 b)</span><span class="hljs-comment">//这里重载()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> a.x &lt; b.x; <span class="hljs-comment">//大顶堆</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">tmp1 <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">tmp1 <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-function">tmp1 <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br>    priority_queue&lt;tmp1&gt; d;<br>    d.<span class="hljs-built_in">push</span>(b);<br>    d.<span class="hljs-built_in">push</span>(c);<br>    d.<span class="hljs-built_in">push</span>(a);<br>    <span class="hljs-keyword">while</span> (!d.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; d.<span class="hljs-built_in">top</span>().x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        d.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    priority_queue&lt;tmp1, vector&lt;tmp1&gt;, tmp2&gt; f;<br>    f.<span class="hljs-built_in">push</span>(b);<br>    f.<span class="hljs-built_in">push</span>(c);<br>    f.<span class="hljs-built_in">push</span>(a);<br>    <span class="hljs-keyword">while</span> (!f.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; f.<span class="hljs-built_in">top</span>().x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        f.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>扩展阅读</strong></p><ul><li><a href="https://blog.csdn.net/weixin_36888577/article/details/79937886">c++优先队列(priority_queue)用法详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>语法总结——C++11</title>
    <link href="/2021/07/28/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94C++%2011/"/>
    <url>/2021/07/28/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94C++%2011/</url>
    
    <content type="html"><![CDATA[<h1 id="语法总结c-11"><a class="markdownIt-Anchor" href="#语法总结c-11"></a> 语法总结——C++ 11</h1><h2 id="使用emplace操作"><a class="markdownIt-Anchor" href="#使用emplace操作"></a> 使用emplace操作</h2><table><thead><tr><th>新函数</th><th>对应之前函数</th></tr></thead><tbody><tr><td>emplace(i, type)</td><td>insert(type, i)</td></tr><tr><td>emplace_front</td><td>push_front</td></tr><tr><td>emplace_back</td><td>push_back</td></tr></tbody></table><ul><li><p>emplace是构造而不是拷贝元素，不需要拷贝或者移动内存。</p><ul><li>如果元素是基本类型，新特性就没有体现，也就没有优势</li></ul></li><li><p>所有的标准库容器（array除外，因为它的长度不可改变，不能插入元素）都增加了类似的方法</p></li><li><p>使用示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">S.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">data</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<span class="hljs-comment">//让其构造函数构造好了对象之后，再使用复制构造函数</span><br>S.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">//emplace这样接受新对象的时候，自己会调用其构造函数生成对象然后放在容器内（比如这里传入了1，2，它则会自动调用一次data(1,2))</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++ 11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题总结——字符串的各种反转及应用</title>
    <link href="/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%8D%E8%BD%AC%E5%8F%8A%E8%BF%90%E7%94%A8/"/>
    <url>/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%8D%E8%BD%AC%E5%8F%8A%E8%BF%90%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题总结字符串的各种反转及运用"><a class="markdownIt-Anchor" href="#刷题总结字符串的各种反转及运用"></a> 刷题总结——字符串的各种反转及运用</h1>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题总结——字符串KMP算法分析与应用</title>
    <link href="/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84KMP%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84KMP%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题总结字符串的kmp算法分析与应用"><a class="markdownIt-Anchor" href="#刷题总结字符串的kmp算法分析与应用"></a> 刷题总结——字符串的KMP算法分析与应用</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li>KMP的经典思想就是：<strong>当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</strong><ul><li>如何记录已经匹配的文本内容，是KMP的重点，也是next数组肩负的重任</li></ul></li><li><mark>next数组</mark>：前缀表（<em>prefix table</em>）<ul><li>前缀表是用来回退的，它记录了模式串(与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配</li><li>记录下标i之前（包括i）的字符串中，有多大长度的相同<strong>前缀后缀</strong></li></ul></li><li>最长相等前后缀<ul><li><mark>前缀</mark>：指<strong>不包含最后一个字符</strong>的所有以第一个字符开头的连续子串</li><li><mark>后缀</mark>：指<strong>不包含第一个字符</strong>的所有以最后一个字符结尾的连续子串</li><li><strong>前缀表要求的就是相同前后缀的长度</strong></li></ul></li></ul><h2 id="如何构造前缀表和next数组"><a class="markdownIt-Anchor" href="#如何构造前缀表和next数组"></a> 如何构造前缀表和next数组</h2><ul><li><p>前缀表中记录了模式串中每个位置从 [0,位置] 的最长相等前后缀的长度</p><ul><li>前缀表的长度等于模式串</li></ul></li><li><p>当在 模式表i 处发生不匹配时，只需找到前缀表中i-1的位置处的值，即可知道下次匹配从<code>模式表[前缀表[i-1]]</code>处开始</p></li><li><p>为了简便，通常会将前缀表向右移动并赋初值为-1，得到<code>next数组</code>,这样下次匹配就是<code>模式表[next[i]]</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*构造nextu</span><br><span class="hljs-comment">1. 初始化</span><br><span class="hljs-comment">2. 处理前后缀不同的情况</span><br><span class="hljs-comment">3. 处理前后缀相同的情况</span><br><span class="hljs-comment">整个算法有点动态规划的味道，在前一段完成的基础上，获得下一段的情况</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* next, <span class="hljs-keyword">const</span> string&amp; s)</span> </span>&#123;<br>next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<span class="hljs-comment">//先给next[0]赋初值,必定是-1</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">-1</span>;<span class="hljs-comment">//记录s[0]-s[j-1]最长相等前缀的后一个位置</span><br>   <span class="hljs-keyword">while</span>(j&lt;s.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//因为我们是使用右移的next数字，所以循环的j实际上是给j+1赋值</span><br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>||s[j]==s[k])&#123;<span class="hljs-comment">//这里加k==-1这个条件，实际上也是一个给next[1]赋初值的条件，因为s[1]不匹配的话，只能用s[0]l来匹配，</span><br>    <span class="hljs-comment">//如果s[j+1]不匹配,考虑0-j的字符串,当s[k]==s[j]时,0-j字符串的k应该是k+1，所以s[j+1]=k+1（之后为了下次循环，k，j也要往前移动一位）</span><br>            j++;k++;<br>         next[j]=k;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//如果s[j+1]不匹配时，考虑0-j的字符串，当s[j]!=s[k]，0-j的最长相等前缀位置不是k(因为k是0-j-1的)，所以要更新这次的k。因为k是0-j-1的最长相等前缀的后一个位置，所以s[j]!=s[k]最长前缀只可能在0-k-1中出现，那么next[k]就应该是下一个去匹配的位置，进入下一次循环判断直到有s[k]==s[j],那么此时的k就是0-j处的最长前缀的后一个位置</span><br>            k=next[k];<br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="题目练习"><a class="markdownIt-Anchor" href="#题目练习"></a> 题目练习</h2><h3 id="在一个串中查找是否出现过另一个串"><a class="markdownIt-Anchor" href="#在一个串中查找是否出现过另一个串"></a> 在一个串中查找是否出现过另一个串</h3><ul><li><p><a href="https://leetcode-cn.com/problems/implement-strstr/">28.Implement strStr()</a></p><ul><li><p>next数组可以优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">next[j]=s[j]!=s[k]?k:next[k]<span class="hljs-comment">//next数组优化，避免s[j+1]发生不匹配时，下一个s[next[j+1]]==s[j+1]继续不匹配，需要继续往下匹配</span><br></code></pre></td></tr></table></figure></li></ul></li><li></li></ul><p><strong>扩展阅读</strong></p><ul><li><a href="https://www.cnblogs.com/yjiyjige/p/3263858.html">详解KMP算法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题总结——多指针法</title>
    <link href="/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%A4%9A%E6%8C%87%E9%92%88%E6%B3%95/"/>
    <url>/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%A4%9A%E6%8C%87%E9%92%88%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题总结多指针法"><a class="markdownIt-Anchor" href="#刷题总结多指针法"></a> 刷题总结——多指针法</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li><strong>双指针法基本都是应用在数组，字符串与链表的题目上</strong></li><li>一般题目要求空间复杂度为O(1)，但要对数组等进行操作，可以考虑使用该方法</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li>一般常用的双指针法：<ul><li>快慢双指针：同一方向移动，但是速度不同</li><li>前后双指针：不同方向移动</li><li>工作指针+标识指针：标识指针的移动取决于工作指针</li></ul></li><li>特殊情况下也有多指针法，需要具体问题具体分析</li></ul><h2 id="题目练习"><a class="markdownIt-Anchor" href="#题目练习"></a> 题目练习</h2><h3 id="数组移除元素"><a class="markdownIt-Anchor" href="#数组移除元素"></a> 数组——移除元素</h3><p>工作指针+标识指针</p><ul><li>[27.Remove Element](<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. Remove Duplicates from Sorted Array</a>)</li><li>[26.Remove Duplicates from Sorted Array](<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. Remove Duplicates from Sorted Array</a>)—2021.7.3</li><li><a href="https://leetcode-cn.com/problems/move-zeroes/">283.Move Zeroes</a></li><li><a href="https://leetcode-cn.com/problems/backspace-string-compare/">844.Backspace String Compare</a>—2020.7.5</li><li><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">977.Squares of a Sorted Array</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题总结——多数想加（减）等于特定值</title>
    <link href="/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%A4%9A%E6%95%B0%E7%9B%B8%E5%8A%A0%EF%BC%88%E5%87%8F%EF%BC%89%E7%AD%89%E4%BA%8E%E7%89%B9%E5%AE%9A%E5%80%BC/"/>
    <url>/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%A4%9A%E6%95%B0%E7%9B%B8%E5%8A%A0%EF%BC%88%E5%87%8F%EF%BC%89%E7%AD%89%E4%BA%8E%E7%89%B9%E5%AE%9A%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题总结多数相加减等于特定值"><a class="markdownIt-Anchor" href="#刷题总结多数相加减等于特定值"></a> 刷题总结——多数相加（减）等于特定值</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li>存在一类题目，给你一些数组（可能是一个，也可能是多个），给你一个<code>target</code>，要求你从给定的数据中，选择一些数相加（减）等于<code>target</code></li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ul><li>这类算是排列组合题。如果暴力求解，就直接多重循环将数字排列组合验证即可(一般会超时)</li><li>但是考虑到已知<code>target</code>,我们可以<strong>先排列组合部分获得值</strong>，然后根据结果去找接下来需要应该要获得的值</li><li>重点就是如何确定数据中是否存在应该要获得的值<ul><li>一种情况，可以利用<code>find()函数</code><ul><li><code>STL find()</code>时间复杂度是<code>O(n)</code></li><li><code>map、set</code>成员函数<code>find()</code>是<code>O(logn)</code></li></ul></li><li>另一种情况，可以利用哈希，空间换时间，缩小时间复杂度<ul><li>先将排列组合的值保存下来，减少循环层数</li></ul></li></ul></li><li>此类题目可能存在的不同要求：<ol><li>最终结果获得的值不能重复：那么在找的过程中，<strong>要确保找到的数字是之前部分结果中没有使用过的</strong>，此时哈希法不太好用，可以考虑多指针法<ul><li>多指针法，一般要对数据进行排序，所以也不适用需要最后返回索引的问题</li></ul></li></ol></li></ul><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><h3 id="同一集合中找数据返回数据索引"><a class="markdownIt-Anchor" href="#同一集合中找数据返回数据索引"></a> 同一集合中找数据+返回数据索引</h3><ul><li>[1.Two Sum](LeetCode <a href="http://1.md/">1.md/</a>)</li></ul><h3 id="同一集合中找数据返回结果数值"><a class="markdownIt-Anchor" href="#同一集合中找数据返回结果数值"></a> 同一集合中找数据+返回结果数值</h3><ul><li>[15.3Sum](LeetCode <a href="http://15.md">15.md</a>)</li><li><a href="https://leetcode-cn.com/problems/4sum/">18.4Sum</a></li></ul><h3 id="不同集合中找数据返回结果数量"><a class="markdownIt-Anchor" href="#不同集合中找数据返回结果数量"></a> 不同集合中找数据+返回结果数量</h3><ul><li><a href>454.4Sum II</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题记录——LeetCode</title>
    <link href="/2021/07/28/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94LeetCode/"/>
    <url>/2021/07/28/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94LeetCode/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题记录leetcode"><a class="markdownIt-Anchor" href="#刷题记录leetcode"></a> 刷题记录——LeetCode</h1><h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2><h3 id="二分法"><a class="markdownIt-Anchor" href="#二分法"></a> 二分法</h3><p><strong>适用情况</strong></p><ul><li>在一组有序数字中，进行查找操作</li></ul><p><strong>注意</strong></p><ul><li>根据不同的情况，要对while的循环条件和里面的if选择条件进行修改</li></ul><p><strong>基本格式</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++">```<br><br><br><br>**题目练习**<br><br>- [<span class="hljs-number">704.</span> Binary Search](https:<span class="hljs-comment">//leetcode-cn.com/problems/binary-search/)</span><br>- [<span class="hljs-number">35.</span> Search Insert Position](https:<span class="hljs-comment">//leetcode-cn.com/problems/search-insert-position/)</span><br>- [<span class="hljs-number">34.</span> Find First <span class="hljs-keyword">and</span> Last Position of Element in Sorted Array](https:<span class="hljs-comment">//leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)(==题解==)---2021.7.1</span><br>- [<span class="hljs-number">69.</span> <span class="hljs-built_in">Sqrt</span>(x)](https:<span class="hljs-comment">//leetcode-cn.com/problems/sqrtx/)（==题解==）----2021.7.2</span><br>- [<span class="hljs-number">367.</span> Valid Perfect Square](https:<span class="hljs-comment">//leetcode-cn.com/problems/valid-perfect-square/)---2021.7.3</span><br><br>### 快慢指针法----移除元素<br><br>**适用情况**<br><br>- 在有序数组中，需要移动元素位置（包括移除、移动元素）<br><br>**注意**<br><br>- 不同的移除条件，循环里有不同的写法<br><br>**题目练习**<br><br>- [<span class="hljs-number">27.</span>Remove Element]([<span class="hljs-number">26.</span> Remove Duplicates from Sorted Array](https:<span class="hljs-comment">//leetcode-cn.com/problems/remove-duplicates-from-sorted-array/))</span><br>- [<span class="hljs-number">26.</span>Remove Duplicates from Sorted Array]([<span class="hljs-number">26.</span> Remove Duplicates from Sorted Array](https:<span class="hljs-comment">//leetcode-cn.com/problems/remove-duplicates-from-sorted-array/))---2021.7.3</span><br>- [<span class="hljs-number">283.</span>Move Zeroes](https:<span class="hljs-comment">//leetcode-cn.com/problems/move-zeroes/)</span><br>- [<span class="hljs-number">844.B</span>ackspace String Compare](https:<span class="hljs-comment">//leetcode-cn.com/problems/backspace-string-compare/)---2020.7.5</span><br>- [<span class="hljs-number">977.</span>Squares of a Sorted Array](https:<span class="hljs-comment">//leetcode-cn.com/problems/squares-of-a-sorted-array/)</span><br><br>### 滑动窗口<br><br>**适用情况**<br><br>- 查找连续子数组问题，不断的调节子序列的起始位置和终止位置，从而得出我们想要的结果<br>- 特殊情况也可使用前缀和思想<br><br>**注意**<br><br>- 根据要求，设计每次窗户扩展后的处理方法非常关键<br><br>**模版**<br><br>```c++<br>根据题目，<span class="hljs-keyword">for</span>循环内窗口扩展操作作准备<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-comment">//窗口起始位置</span><br><span class="hljs-keyword">int</span> result=？<span class="hljs-comment">//看情况初值（最大或最小），保存每次结果和最终结果</span><br><span class="hljs-keyword">for</span>（<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;size;j++)&#123;<span class="hljs-comment">//滑动窗口开始扩展</span><br>    根据题目要求，设计每次窗户扩展的处理操作并保存记录<br>    <span class="hljs-keyword">while</span>(窗口操作后的记录的临界情况)&#123;<span class="hljs-comment">//记录数据，并开始滑动窗口</span><br>        <span class="hljs-keyword">int</span> ans=j-i+<span class="hljs-number">1</span>;<span class="hljs-comment">//此时窗口大小</span><br>        result=result&gt;ans?result:ans;<span class="hljs-comment">//根据要求写判断逻辑</span><br>        窗口起始位置向前滑动后对记录的影响<br>        i++;<span class="hljs-comment">//窗口起始位置向前滑动</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>题目练习</strong></p><ul><li><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">209.Minimum Size Subarray Sum</a>—2021.7.6<ul><li>前缀和 O(nlogn)</li></ul></li><li><a href="https://leetcode-cn.com/problems/fruit-into-baskets/">904.Fruit Into Baskets</a>–2021.7.7</li><li><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76.Minmum Window Substring</a>(<mark>题解</mark>)—2021.7.8</li></ul><h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3><ul><li><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">59.Spiral Matrix II</a>(<mark>题解</mark>)—2021.7.9</li></ul><h2 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h2><p><mark>用while循环遍历链表时，要根据自己的处理逻辑，选择是用<code>while(node-&gt;next)</code>还是<code>while(node)</code>，一般来说如果能确定进入循环前的node必有值的话，就用前一个，否则用后一个</mark></p><h3 id="虚拟头结点"><a class="markdownIt-Anchor" href="#虚拟头结点"></a> 虚拟头结点</h3><p><strong>适用情况</strong></p><ul><li>一般来说，如果对单链表进行操作，除头结点外结点操作基本相同，那么可以添加一个虚拟头结点，使得原头结点变成子节点，统一操作</li></ul><p><strong>注意</strong></p><ul><li>工作指针指向虚拟头结点后，要从node-&gt;next开始判断</li><li>返回vir_head-&gt;next才是真正头指针</li></ul><p><strong>模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">ListNode* vir_head=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<span class="hljs-comment">//初始化虚拟结点</span><br>vir_head-&gt;next=head;<span class="hljs-comment">//构造虚拟头结点</span><br>ListNode* node=vir_head;<span class="hljs-comment">//工作指针从虚拟结点开始</span><br></code></pre></td></tr></table></figure><p><strong>题目练习</strong></p><ul><li><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203.Remove Linked List Elements</a></li><li><a href="https://leetcode-cn.com/problems/design-linked-list/">707.Design Linked List</a>—2021.7.10</li><li><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24.Swap Nodes in Pairs</a>—2021.7.12</li></ul><h3 id="链表翻转"><a class="markdownIt-Anchor" href="#链表翻转"></a> 链表翻转</h3><p><strong>方法</strong></p><ul><li>头插法：新建一个虚拟头结点，利用头插法构造逆序链表</li><li>双指针法：利用前后指针，将next的指向逆转过来</li></ul><p><strong>题目练习</strong></p><ul><li><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206.Reverse Linked List</a>(<mark>笔记</mark>)—20217.11</li></ul><h3 id="双指针法一遍找倒数位置元素"><a class="markdownIt-Anchor" href="#双指针法一遍找倒数位置元素"></a> 双指针法——一遍找倒数位置元素</h3><p><strong>注意</strong></p><ul><li>要确定last、fast指针的距离，以及要选择最后fast是走到最后一个位置处，还是走到null处时，此时的fast的位置到底是不是符合要求的</li></ul><p><strong>题目</strong></p><ul><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19.Remove Nth Node From End of List</a>（<mark>笔记</mark>）—2021.712</li></ul><h3 id="双指针法找链表相交结点位置"><a class="markdownIt-Anchor" href="#双指针法找链表相交结点位置"></a> 双指针法——找链表相交结点位置</h3><p><strong>注意</strong></p><ul><li>要先确定两个指针的距离，然后同步移动找到指针值相同的结点即可</li></ul><p><strong>题目</strong></p><ul><li><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">面试题02.07.链表相交</a></li></ul><h3 id="环形链表确定环及环入口位置"><a class="markdownIt-Anchor" href="#环形链表确定环及环入口位置"></a> 环形链表——确定环及环入口位置</h3><p><strong>注意</strong></p><ul><li>根据快慢指针找环</li><li>环的入口位置需要数学证明</li></ul><p><strong>题目</strong></p><ul><li>[142.Link List Cycle II（<mark>题解</mark>）—2021.7.13</li></ul><h2 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h2><p><strong>适用情况</strong></p><ul><li>需要记录元素出现的次数–map</li><li>需要记录元素是否出现过–set\map</li></ul><p><strong>注意</strong></p><ul><li><p>如果数据比较少，key可以用int且最大值不大，直接用数组即可</p></li><li><p>如果数据比较少，但特别分散、跨度大，可以用unordered_map</p></li><li><p>如果只是需要记录是否出现过，可以用unordered_set作集合操作，用find判断</p><p>也可用map只读一次数据</p></li></ul><p><strong>题目</strong></p><ul><li><a href="https://leetcode-cn.com/problems/valid-anagram/">242.Vaild Anagram</a></li><li><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">349.intersection-of-two-arrays</a>—2021.7.14</li><li><a href="https://leetcode-cn.com/problems/happy-number/">202.Happy Number</a></li><li><a href="https://leetcode-cn.com/problems/two-sum/">1.Two Sum</a>—2021.7.15</li><li><a href>454.4Sum II</a></li><li><a href="https://leetcode-cn.com/problems/ransom-note/">383.Ransom Note</a>—2021.7.16</li><li><a href="https://leetcode-cn.com/problems/3sum/">15.3Sum</a></li><li><a href="https://leetcode-cn.com/problems/4sum/">18.4Sum</a></li></ul><p><strong>扩展阅读</strong></p><ul><li><a href="https://www.cnblogs.com/ladawn/p/8203789.html">C++ multimap查找相同键的键值对方法</a></li></ul><h2 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h2><h3 id="反转"><a class="markdownIt-Anchor" href="#反转"></a> 反转</h3><p><strong>题目</strong></p><ul><li><a href="https://leetcode-cn.com/problems/reverse-string/">344.Reverse String</a>—2021.7.19</li><li><a href="https://leetcode-cn.com/problems/reverse-string-ii/">541.Reverse String II</a> —2021.7.20</li><li><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/">151.Reverse Wrods in a String</a></li><li><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指Offer 58-II 左旋转字符串</a>—2021.7.21</li><li><a href="https://leetcode-cn.com/problems/implement-strstr/">28.Implement strStr</a>—2021.7.22</li><li><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459.Repeated Sbustring Pattern</a>(<mark>无思路</mark>)（<mark>好好研究</mark>）—2021.7.23</li></ul><h2 id="栈和队列"><a class="markdownIt-Anchor" href="#栈和队列"></a> 栈和队列</h2><p><strong>预备知识</strong></p><ul><li>栈、队列是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的。STL中栈的队列往往不被归类为容器，而被归类为container adapter（容器适配器）</li></ul><p><strong>注意</strong></p><ul><li><code>stack.pop()</code>返回值是void,<code>stack.top()</code>返回值才是具体数值</li></ul><p><strong>应用类型</strong></p><ul><li>对称匹配类问题——栈<ul><li>两个元素匹配，匹配后可再有操作</li></ul></li></ul><p><strong>题目练习</strong></p><ul><li><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232.Implement Queue using Stacks</a></li><li><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225.Implement Stack using Queues</a>—2021.7.24</li><li><a href="https://leetcode-cn.com/problems/valid-parentheses/">20.Vaild Parentheses</a></li><li><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">1047.Remove All Adjacent Duplicates In String</a>—2021.7.26</li><li><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">150.Evaluate Reverse Polish Notation</a>—2021.7.27</li><li><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">239.Sliding Window Maximum</a>（<mark>题解问题</mark>）—2021.7.28</li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode刷题</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.远程仓库</title>
    <link href="/2021/07/27/3.%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2021/07/27/3.%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="远程仓库"><a class="markdownIt-Anchor" href="#远程仓库"></a> 远程仓库</h1><h2 id="配置ssh"><a class="markdownIt-Anchor" href="#配置ssh"></a> 配置SSH</h2><ul><li><p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的、</p></li><li><p>第1步：创建SSH Key。打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span>  ~<span class="hljs-string">/.ssh</span><span class="hljs-string">//</span>检查本机是否有ssh,如果提示没有则需要创建<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><span class="hljs-string">//</span>创建ssh,一路回车，使用默认值即可<br><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span> <span class="hljs-string">//</span>进入文件<br>ll<span class="hljs-string">//</span>查看是否存在有id_rsa（私匙）和id_rsa.pub（公匙）两个文件<br>cat id_rsa.pub<span class="hljs-string">//</span>查看公匙<br></code></pre></td></tr></table></figure></li><li><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面</p><ul><li>点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</li></ul></li><li><p>GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p></li></ul><h2 id="本地仓库关联远程仓库"><a class="markdownIt-Anchor" href="#本地仓库关联远程仓库"></a> 本地仓库关联远程仓库</h2><h3 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h3><ul><li><code>git remote add origin &lt;仓库地址&gt;</code>：连接远程仓库<ul><li>仓库地址选择git开头的那个</li><li>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的</li></ul></li><li><code>git push -u &lt;远程仓库名&gt; &lt;本地分支名&gt;</code>：将当前本地仓库分支推送到远程仓库<ul><li><code>-u</code>：第一次推送<code>master</code>分支时，加上<code>-u</code>参数，Git不但会把本地的<code>main</code>分支内容推送的远程新的<code>main</code>分支，还会把本地的<code>main</code>分支和远程的<code>main</code>分支关联起来，在以后的推送或者拉取时就可以简化命令,直接使用<code>git push</code></li><li><code>&lt;本地分支名&gt;:&lt;远程分支名&gt;</code>：推送到远程仓库的分支重新命名</li></ul></li><li><code>git remote rm &lt;远程仓库名&gt;</code>：解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动</li><li><code>git remote -v</code>：查看远程库信息</li></ul><h2 id="克隆远程库"><a class="markdownIt-Anchor" href="#克隆远程库"></a> 克隆远程库</h2><h3 id="命令-2"><a class="markdownIt-Anchor" href="#命令-2"></a> 命令</h3><ul><li><code>git clone &lt;仓库地址&gt;</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.本地仓库</title>
    <link href="/2021/07/27/2.%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
    <url>/2021/07/27/2.%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="本地仓库"><a class="markdownIt-Anchor" href="#本地仓库"></a> 本地仓库</h1><h2 id="仓库版本控制"><a class="markdownIt-Anchor" href="#仓库版本控制"></a> 仓库版本控制</h2><ul><li><code>git status</code>：查看本地仓库状态</li><li><code>git diff</code>：查看仓库和之前版本的区别</li><li><code>git log</code>：显示从最近的最远的提交日志<ul><li><code>--grapt</code>：显示分支合并图</li><li><code>--pretty=oneline</code>：简化日志信息，将每个提交放在一行显示，<strong>查看的提交数很大时非常有用</strong></li></ul></li><li><code>git reset --hard xxx</code>：回退仓库版本xxx<ul><li><code>xxx</code><ul><li>Git中用<code>head</code>表示当前版本，上个版本是<code>head^</code>，上上个版本是<code>head^^</code>,也可用<code>head~10</code>来表示上10个版本</li><li>直接用<code>git log</code>中提交<code>commit id（版本号）</code>前几位</li></ul></li></ul></li><li><code>git reflog</code>：记录使用的每一次命令</li></ul><h2 id="工作区和暂存区"><a class="markdownIt-Anchor" href="#工作区和暂存区"></a> 工作区和暂存区</h2><ul><li><mark>工作区</mark>：就是你在电脑里能看到的目录</li><li><mark>版本库</mark>：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库<ul><li>版本库中存在一个称为stage(或index)的<mark>暂存区</mark>，还有Git为为我们自动创建的第一个分支<code>main</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code></li></ul></li></ul><p><img src="../images/0.jpg" alt="img"></p><ul><li><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改</p></li></ul><h2 id="管理修改"><a class="markdownIt-Anchor" href="#管理修改"></a> 管理修改</h2><p><strong>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件</strong></p><ul><li>git每次都会对仓库内发生的修改情况进行记录，只要存在修改就会存在记录</li><li>考虑这样一种情况：第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code><ul><li>add会将第一次修改提交到暂存区，commit只会将暂存区的文件提交</li><li>但是这并不意味着第二次修改不存在了，我们可以再进行add后再提交，仍然可以提交第二次修改</li></ul></li></ul><h2 id="撤销修改"><a class="markdownIt-Anchor" href="#撤销修改"></a> 撤销修改</h2><ul><li><code>git checkout</code> 可以用来新建或者切换分支， 也可以用来回退文件版本</li><li>从 <code>Git 2.23</code> 版本开始引入了两个新的命令：<ul><li><code>git switch</code> 切换分支</li><li><code>git restore</code>：还原工作区的文件<ul><li><code>--staged</code>:将暂存区的文件从暂存区撤出，但不会更改文件的内容</li><li>如果文件还未add,那么不需要加上面参数；如果一级add,那么回退顺序应该是先回退暂存区，再回退文件（直接回退文件是没用的）</li></ul></li></ul></li><li>如果修改被commit了，那么只能回退版本</li></ul><h2 id="删除文件"><a class="markdownIt-Anchor" href="#删除文件"></a> 删除文件</h2><ul><li>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了</li><li>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了</li><li>现在你有两个选择，<ul><li>一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code><ul><li>或者用<code>git add &lt;file&gt;</code>删掉</li></ul></li><li>另一种情况是删错了，因为版本库里还有，所以当然可以撤销修改</li></ul></li><li><strong>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.Git简介</title>
    <link href="/2021/07/27/1.Git%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/07/27/1.Git%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="git简介"><a class="markdownIt-Anchor" href="#git简介"></a> Git简介</h1><h2 id="git起源"><a class="markdownIt-Anchor" href="#git起源"></a> Git起源</h2><ul><li>在2002年以前，世界各地的志愿者把源代码文件通过==diff<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>==的方式发给Linus，然后由Linus本人通过手工方式合并代码</li><li>到了2002年,Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统</li><li>2005,Linux社区牛人试图破解BitKeeper的协议，BitMover公司要收回Linux社区的免费使用权</li><li>Linus花了两周时间自己用C写了一个分布式版本控制系统——Git！一个月之内，Linux系统的源码已经由Git管理了</li></ul><h2 id="版本控制系统"><a class="markdownIt-Anchor" href="#版本控制系统"></a> 版本控制系统 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2><ul><li>集中式：<ul><li>集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</li><li>集中式版本控制系统最大的毛病就是必须联网才能工作，受限于网速</li></ul></li><li>分布式：<ul><li>分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，工作的时候，就不需要联网</li><li>个人的对库文件的修改只需通过局域网推送给对方即可看到</li><li>分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已</li></ul></li><li>Git是目前世界上最先进的<mark>分布式版本控制系统<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></mark></li></ul><h2 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装Git</h2><ul><li><p>Linux：直接用命令行安装</p></li><li><p>Win：在官网下载安装程序，并配置机器名字和地址</p></li><li><p>具体操作互联网搜索即可</p></li><li><p>第一次安装需要配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;xxx&quot;<br></code></pre></td></tr></table></figure></li></ul><h2 id="版本库"><a class="markdownIt-Anchor" href="#版本库"></a> 版本库</h2><ul><li>版本库（<em>repository</em>)：可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”</li></ul><h3 id="操作过程"><a class="markdownIt-Anchor" href="#操作过程"></a> 操作过程</h3><ul><li><code>git init</code>：在指定目录中使用，可以将该目录变成Git可以管理的仓库<ul><li>会在该目录下生成一个<code>.git</code>目录，是Git用来跟踪管理版本库的，一般不需改动</li><li>该仓库是一个本地仓库</li></ul></li><li><code>git add xxx</code>：把位于指定目录的文件添加到仓库</li><li><code>git commit -m &quot;xxx&quot;</code>：将文件提交到仓库<ul><li>一次commit会将之前所有的add都会提交</li></ul></li></ul><p><strong>扩展阅读</strong></p><ul><li><a href="https://baike.so.com/doc/5903265-6116166.html">百科-版本控制</a></li><li><a href="https://www.cnblogs.com/wx1993/p/7680877.html">集中式（SVN）和分布式（Git）版本控制系统的简单比较</a></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>diff 命令比较文本文件,它能比较单个文件或者目录内容。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>一种软体工程技巧，籍以在开发的过程中，确保由不同人所编辑的同一档案都得到更新。版本控制透过文档控制(documentation control)记录程序各个模组的改动，并为每次改动编上序号 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>每个人都可以创建一个独立的代码仓库用于管理，各种版本控制的操作都可以在本地完成。每个人修改的代码都可以推送合并到另外一个代码仓库中 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>Git学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
