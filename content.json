{"meta":{"title":"Blog For Everything","subtitle":"记录学习轨迹","description":"各类学习笔记","author":"shen yayu","url":"https://syy-99.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-07-22T16:00:00.000Z","updated":"2021-07-26T12:38:25.863Z","comments":false,"path":"404.html","permalink":"https://syy-99.github.io/404.html","excerpt":"","text":"网站出逃啦！！ 点击此处返回首页 shen yanyu"},{"title":"about","date":"2021-07-27T01:12:47.000Z","updated":"2021-07-27T01:13:42.330Z","comments":false,"path":"about/index.html","permalink":"https://syy-99.github.io/about/index.html","excerpt":"","text":"这里写关于页正文"},{"title":"categories","date":"2021-07-26T12:10:22.000Z","updated":"2021-07-26T12:11:56.809Z","comments":false,"path":"categories/index.html","permalink":"https://syy-99.github.io/categories/index.html","excerpt":"","text":""},{"title":"tag","date":"2021-07-26T12:01:00.000Z","updated":"2021-07-26T12:05:40.878Z","comments":false,"path":"tags/index.html","permalink":"https://syy-99.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Github+Hexo搭建个人博客","slug":"Github+Hexo搭建个人博客","date":"2021-08-05T09:03:30.031Z","updated":"2021-08-05T09:11:18.037Z","comments":true,"path":"2021/08/05/Github+Hexo搭建个人博客/","link":"","permalink":"https://syy-99.github.io/2021/08/05/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Github+Hexo搭建个人博客 工具准备 git安装：直接官网下载即可 Node.js安装 Node的安装与环境变量的配置 Hexo安装 先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令 1npm install -g hexo-cli 用hexo -v查看版本 博客初始化 进入之前创建的文件夹blog，这个文件夹下直接右键git bash打开 按顺序输入命令 123hexo inithexo generatehexo serve 浏览器输入地址 localhost:4000，网页如果成功显示，则说明成功 部署博客 配置博客部署地址 先在Github上创建一个仓库名为&lt;你的用户名&gt;.github.io的仓库 打开根目录下的_config.yml文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 main 分支 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: &#123;git repo ssh address&#125; branch: main 安装一个支持 Git 的部署插件 1npm install hexo-deployer-git --save 安装成功之后，执行部署命令。运行成功后，在仓库中就能看到有新文件上传 1hexo deploy 配置站点信息 修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容 123456# Sitetitle: &lt;网站标签页名字&gt;subtitle: xxxxdescription:keywords: &quot;c++ 刷题，xxx&quot;author: 设置一下语言，如果要设置为汉语的话可以将 language 的字段设置为 zh-CN，修改如下 1language: zh-CN 主题相关配置 不同主题配置可以在GitHub上找帮助文档进行设置 这里提供一个链接，设置next主题教程 https://mp.weixin.qq.com/s/3li0n8REcU1DviwWiEYw_A 使用出现的问题 如何上传带图片的博客？ 修改根目录下_config.yam的配置项post_asset_folder为true 下载插件npm install https://github.com/CodeFalling/hexo-asset-image --save 添加md文件时，同时添加一个同名的文件夹，里面放图片，md里面使用![img](&lt;文件夹名&gt;/图片名)即可 如果是通过npm镜像下，可能不是最新的，需要修改Blog\\node_modules\\hexo-asset-image\\index.js里面var endPos=link.length-1","categories":[{"name":"杂项","slug":"杂项","permalink":"https://syy-99.github.io/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"杂","slug":"杂","permalink":"https://syy-99.github.io/tags/%E6%9D%82/"}]},{"title":"5.标签管理","slug":"5.标签管理","date":"2021-08-03T03:26:55.919Z","updated":"2021-08-03T03:33:10.763Z","comments":true,"path":"2021/08/03/5.标签管理/","link":"","permalink":"https://syy-99.github.io/2021/08/03/5.%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/","excerpt":"","text":"标签管理 标签简介 发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。 tag相较于commit号，更好记。 创建标签 切换到需要打标签的分支上 输入命令git tag &lt;name&gt;，为该分支的最新提交打标签 如果想要为特定提交打标签，则需要找到commit号(git log) 用命令git tag &lt;name&gt; &lt;commit号&gt; git tag查看所有标签 标签不是按时间顺序列出的，而是按字母排列的 相关命令 git show &lt;tag名字&gt;：查看标签信息 git tag -a &lt;标签名&gt; -m &quot;xxx&quot;:创建带有说明的标签 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。 操作标签 相关命令 git tag -d &lt;标签名&gt;：删除本地仓库标签 如果标签已经被推送到远程仓库，那先删除本地仓库标签 用git push origin :refs/tags/&lt;标签名&gt; git push origin &lt;标签名&gt;：推送标签到远程仓库 git push origin --tags:一次性推送全部尚未推送到远程仓库的本地标签","categories":[{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"}]},{"title":"4.分支管理","slug":"4.分支管理","date":"2021-08-03T03:26:55.289Z","updated":"2021-08-05T09:59:34.762Z","comments":true,"path":"2021/08/03/4.分支管理/","link":"","permalink":"https://syy-99.github.io/2021/08/03/4.%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/","excerpt":"","text":"分支管理 创建与合并分支 默认本地仓库只有一条分支main HEAD指向main,main指向要提交的时间线 git switch -c &lt;新分支名&gt;:创建并切换新分支，指向main相同的提交 此时HEAD指向新分支。之后的提交都是在新分支下 git branch：查看所有分支 当前分支名前会有一个*号 -a：查看本地和远程仓库所有分支 -r：查看远程仓库分支 git merge &lt;分支名&gt;：合并指定分支的工作到当前分支下 git branch -d &lt;分支名&gt;：删除分支 -D：删除一个没有被合并过得分支 分支冲突 合并冲突： 当创建多分支时，如果修改不同文件，则合并不会提示冲突 如果修改相同文件，合并时会提示冲突，需要手动修改冲突，确定文件的最终版本 Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容 合并策略： 默认使用Fast forward，会直接将Master分支指向Develop分支。在这种模式下，删除分支后，会丢掉分支信息 git merge --no-ff -m &quot;merge with no-ff&quot; dev 使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并 分支管理策略 主分支main(master):代码库应该有一个、且仅有一个主分支。仅用来发布新版本，平时不能在上面干活. 工作分支dev：日常开发。如果想正式对外发布，就在分支上，对Develop分支进行&quot;合并&quot; 临时分支： 功能分支feature-xxx：为了开发某种特定功能，从dev分支上面分出来的。开发完成后，要再并入dev 预发布分支release-xxx：指发布正式版本之前（即合并到main分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从dev分支上面分出来的，预发布结束以后，必须合并进dev和main分支. 修补bug分支fixbug-xxx：修补bug分支是从main分支上面分出来的。修补结束以后，再合并进main和dev分支 bug突然出现，如何保存当前的工作?恢复工作？ 1234git stash //把当前工作现场“储藏”起来，等以后恢复现场后继续工作git stash list //查看该分支保存的状态git stash pop //在该分支下，恢复之前保存的状态，并删除该记录git stash apply &lt;名字&gt; //恢复指定的状态 修补main分支后，如何在dev分支上进行同样的修改操作？ 1git chery-pick &lt;commit编号&gt; //复制一个特定的提交到当前分支 多人协作 当从远程仓库克隆时，实际上Git自动把本地的main分支和远程的main分支对应起来了，并且，远程仓库的默认名称是origin 分支推送策略： main分支是主分支，因此要时刻与远程同步； dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug； feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。 工作模式： 首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地新，需要先用git pull试图合并； 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。 如果合并有冲突，则解决冲突，并在本地提交； 用git status查看当前状态、寻找冲突的文件，手动修改 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！ rebase ??? rebase操作可以把本地未push的分叉提交历史整理成直线； rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。 相关命令 git remote：查看远程库的信息 -v：显示更详细的信息，显示可以抓取和推送的地址 git push origin --delete &lt;远程分支名&gt;：删除远程分支 git clone -b &lt;指定分支名&gt; &lt;远程仓库地址&gt;：克隆远程库指定分支到本地库 扩展阅读 Git分支管理策略","categories":[{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"}]},{"title":"6.自定义Git","slug":"6.自定义Git","date":"2021-08-03T03:26:55.286Z","updated":"2021-08-03T03:33:15.377Z","comments":true,"path":"2021/08/03/6.自定义Git/","link":"","permalink":"https://syy-99.github.io/2021/08/03/6.%E8%87%AA%E5%AE%9A%E4%B9%89Git/","excerpt":"","text":"自定义Git 配置Git git config --global user.name &quot;xxx&quot; 配置每次提交记录名称 git config --global user.email &quot;email@example.com&quot; 配置每次提交个人信息 git config --global color.ui true：让Git显示颜色 忽略特殊文件 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件 如果你确实想添加该文件，可以用-f强制添加到Git 或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查 .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！ 把指定文件排除在.gitignore规则外的写法就是!+文件名 配置别名 git config --global alias.&lt;别名&gt; &lt;实际名字&gt; 每个仓库的Git配置文件都放在.git/config文件中,别名就在[alias]后面 搭建Git服务器 搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。 假设你已经有sudo权限的用户账号，下面，正式开始安装。 第一步，安装git： 1$ sudo apt-get install git 第二步，创建一个git用户，用来运行git服务： 1$ sudo adduser git 第三步，创建证书登录： 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。 第四步，初始化Git仓库： 先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令： 1$ sudo git init --bare sample.git Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git： 1$ sudo chown -R git:git sample.git 第五步，禁用shell登录： 出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行： 1git:x:1001:1001:,,,:/home/git:/bin/bash 改为： 1git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。 第六步，克隆远程仓库： 现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行： 123$ git clone git@&lt;服务器地址&gt;:/srv/sample.gitCloning into &#x27;sample&#x27;...warning: You appear to have cloned an empty repository. 剩下的推送就简单了。 管理公钥 如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。 这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。 管理权限 有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。 这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。","categories":[{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"}]},{"title":"LeetCode 1047","slug":"LeetCode 1047","date":"2021-07-28T08:21:12.590Z","updated":"2021-07-28T08:31:05.511Z","comments":true,"path":"2021/07/28/LeetCode 1047/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%201047/","excerpt":"","text":"LeetCode 1047 概述 https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/ 从string中删除所有相邻且相同的字符，删除后继续重复操作 思路 想当于两个元素的匹配问题，考虑用栈 1234567891011121314151617class Solution &#123;public: string removeDuplicates(string s) &#123; stack&lt;char&gt; sk; for(int i=0;s[i];i++)&#123; if(!sk.empty()&amp;&amp;sk.top()==s[i]) sk.pop(); //这里要加非空判断，因为后续也可能出现栈为空的情况 else sk.push(s[i]); &#125; string p=&quot;&quot;; while(!sk.empty())&#123; p+=sk.top(); sk.pop(); &#125; reverse(p.begin(),p.end()); return p; &#125;&#125;;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 454","slug":"LeetCode 454","date":"2021-07-28T08:21:12.586Z","updated":"2021-07-28T08:31:03.183Z","comments":true,"path":"2021/07/28/LeetCode 454/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%20454/","excerpt":"","text":"LeetCode 454 概述 https://leetcode-cn.com/problems/4sum-ii/ 给定四个数组，从四个数组中各选一个，相加等于0 返回可选的组合的个数 思路 四个不同的数组中选，所以是各自独立的 返回可选的组合的个数，只需进行记录即可 综上，可以使用哈希法。考虑到四个数组，如果暴力求解大概率是超时，所以我们将两个数组的组合情况保存起来，再循环解决 12345678910111213141516171819202122class Solution &#123;public: int fourSumCount(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2, vector&lt;int&gt;&amp; nums3, vector&lt;int&gt;&amp; nums4) &#123; unordered_map&lt;int,int&gt; mp1; for(int a:nums1)&#123; for(int b:nums2)&#123; mp1[a+b]++; //先记录两个数组的所有情况，因为最终结果只要数量，所以只要记录可以组合的值的数量即可 &#125; &#125; // unordered_map&lt;int,int&gt; mp2; int count=0; for(int a:nums3)&#123; for(int b:nums4)&#123; //另外两个数组排列组合 if(mp1.find(0-(a+b))!=mp1.end())&#123; //找期望有的值 count+=mp1[0-(a+b)]; &#125; &#125; &#125; return count; &#125;&#125;;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 239","slug":"LeetCode 239","date":"2021-07-28T08:21:12.583Z","updated":"2021-07-28T08:31:00.886Z","comments":true,"path":"2021/07/28/LeetCode 239/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%20239/","excerpt":"","text":"LeetCode 239 概述 https://leetcode-cn.com/problems/sliding-window-maximum/ 给定一个整形数组，固定滑动窗口长度，窗口从左到右每次滑动一个元素，返回每次窗口的最大值 思路1 滑动窗口的模拟，容易想到使用队列 难点是如何找到每次窗口的最大值，如果在次窗口中暴力求解，O（N^2）会超时。考虑最好在每次窗口滑动时，就能确定最大值。 找最大值需要比较排序，考虑优先队列可以确保每次最大值都在窗口的第一个。问题又来了，因为排序后数字的位置改变，每次移出窗口的数不一定是优先队列中最左边的数，如何来确认呢？ 因为我们只需要找到每次的最大值，不需要关心队列里到底有哪些数字。而最大值永远在优先队列的最左边，我们只需判断每次移动后，该最大值是否被移出队列即可。 每次移出窗口的数组下标是确定的，所以我们可以同时保存值和下标，这样就算排序后数组位置改变，我们还是可以确定是否目前的最大值是否被移出。 1234567891011121314151617181920class Solution &#123;public: vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) &#123; int n = nums.size(); priority_queue&lt;pair&lt;int, int&gt; &gt; q; //同时保存值和下标 for (int i = 0; i &lt; k; ++i) &#123; q.emplace(nums[i], i); &#125; vector&lt;int&gt; ans = &#123;q.top().first&#125;; for (int i = k; i &lt; n; ++i) &#123; q.emplace(nums[i], i); while (q.top().second &lt;= i - k) &#123; //i-k之前的数都是应该被移出的 q.pop(); &#125; ans.push_back(q.top().first); &#125; return ans; &#125;&#125;;//时间：O(nlogn) 空间：O(n) 思路2 其实队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了 如果当前的滑动窗口中有两个下标 i 和 j，其中 i 在 j 的左侧（i &lt; j），并且 i 对应的元素不大于 j 对应的元素（nums[i]≤nums[j]） 当窗口右移时，如果 i 还在窗口，j 一定在窗口，且此时最大值不可能是nums[i] 按照上述分析，所有num[i]就可以不用保存在队列中了 1234567891011121314151617181920212223242526class Solution &#123;public: vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) &#123; int n = nums.size(); vector&lt;int&gt; result; deque&lt;int&gt; dq; for(int i=0;i&lt;k;i++)&#123; while(!dq.empty()&amp;&amp;nums[i]&gt;dq.back())&#123; //按上述分析 保存特定顺序下的窗口元素 dq.pop_back(); &#125; dq.emplace_back(nums[i]); &#125; result.push_back(dq.front()); //第一个窗口的最大值 for(int i=k;i&lt;n;i++)&#123; if(!dq.empty()&amp;&amp;nums[i-k]==dq.front()) //num[i-k]是窗口该移出的元素，判断是否等于队列最前面的值，如果相等则表示其会被移出窗口 dq.pop_front(); why??? while(!dq.empty()&amp;&amp;nums[i]&gt;dq.back()) //只要添加数字进窗口都进行该操作 dq.pop_back(); dq.emplace_back(nums[i]); result.emplace_back(dq.front()); //每次移动完后，队列最前面的值，就是此时窗口的最大值 why?? &#125; return result; &#125;&#125;; 有两处问题需要考虑","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 142","slug":"LeetCode 142","date":"2021-07-28T08:21:12.576Z","updated":"2021-07-28T08:30:57.714Z","comments":true,"path":"2021/07/28/LeetCode 142/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%20142/","excerpt":"","text":"LeetCode 142 概述 在一个链表中，确定是否有环。如果有，确定环的起始结点位置 思路 确定有环：快慢指针法 确定环起始位置： 123(x+y)*2=(x+y)+n(y+z) //这里n(y+z)是快指针多走的x=n(y+z)-y=(n-1)(y+z)+z //x是我们要求的注意到（n-1)(y+z)是环的长度，z、x分别拿出来看就可知道如何找到入口 12345678910111213141516171819202122232425class Solution &#123;public: ListNode *detectCycle(ListNode *head) &#123; if(head==NULL) return NULL; ListNode* slow=head; ListNode* fast=head; int flag=0; while(fast != NULL &amp;&amp; fast-&gt;next != NULL)&#123; //注意判断 slow=slow-&gt;next; //慢指针 fast=fast-&gt;next-&gt;next; //快指针 if(slow==fast)&#123; //有环 flag=1; break; &#125; &#125; //这部分，可以直接放在前面的if里面的 if(flag==0) return NULL; ListNode* temp=head; while(temp!=fast)&#123; fast=fast-&gt;next; temp=temp-&gt;next; &#125; return temp; &#125;&#125;;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 76","slug":"LeetCode 76","date":"2021-07-28T08:21:12.465Z","updated":"2021-07-28T08:30:55.033Z","comments":true,"path":"2021/07/28/LeetCode 76/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2076/","excerpt":"","text":"LeetCode 76 概述 ​ 题目要求在一个字符串中找到包含另一个字符串所有字符（包括重复字符）的最短子序列 思路 子序列问题，考虑滑动窗口思想 1234567891011121314151617181920212223242526272829303132333435363738string minWindow(string s, string t) &#123; int l1=s.length(),l2=t.length(); //获得字符串长度 //做准备，能想d vector&lt;int&gt; mp(128,0); for(int j=0;j&lt;t.length();j++) mp[t[j]]++; int kind=l2; int i=0; //保存每次结果和最终结果 int result=INT_MAX; string str=&quot;&quot;; string str2=&quot;&quot;; for(int j=0;j&lt;l1;j++)&#123; //窗口滑动操作 str+=s[j]; //记录窗口目前数据 if(mp[s[j]]&gt;0)&#123; //窗口滑动对之后操作影响的记录 kind--; &#125; mp[s[j]]--; while(kind==0)&#123; //临界情况 int ans=j-i+1; str2=result&gt;ans?str:str2; result=result&gt;ans?ans:result; //窗口起始位置向前滑动对记录的影响 mp[s[i]]++; if(mp[s[i]]&gt;0)&#123; kind++; &#125; str.erase(0,1); i++; &#125; &#125; return str2; &#125; 对于此题，也可以不用每次记录窗口中的字符串，因为最后可以得到最终窗口的起始、终止位置。 对于此题，还可优化，窗口起始位置可以不用每次只滑动一次，可以直接将窗口前面和目标字符串无关的位置全部移动后再做进一步判断","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 69","slug":"LeetCode 69","date":"2021-07-28T08:21:12.462Z","updated":"2021-07-28T08:30:52.855Z","comments":true,"path":"2021/07/28/LeetCode 69/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2069/","excerpt":"","text":"LeetCode 69 概述 ​ 模拟sqrt函数实现 思路 对于一个整数的平方根，除了几个特殊情况，可以验证&lt;=x/2。这里强调是整数，所以2,3仍然符合，而0,1则要特殊处理。 使用二分法，while循环中的if条件要注意，如果mid*mid&gt;x,那么结果在mid之后；反正则不一定 12345678910111213141516int mySqrt(int x) &#123; if(x==0) return 0; if(x==1) return 1; int start=1; int end=x/2; int ans=-1; while(end&gt;=start)&#123; int mid=start+(end-start)/2; if((long long)mid*mid&gt;x) //比x大，那么一定在前面 end=mid-1; else&#123; //&lt;=x，不一定先记录下来 ans=mid; //可能的结果先保存下来，所以end可以等于start start=mid+1; //继续二分 &#125; &#125; return ans; 如果不用x/2,那么就不需要特殊情况单独处理 123456789101112131415int mySqrt(int x) &#123; int start=0; int end=x; //v int ans=-1; while(end&gt;=start)&#123; int mid=start+(end-start)/2; if((long long)mid*mid&gt;x) end=mid-1; else&#123; ans=mid; start=mid+1; &#125; &#125; return ans; &#125;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 59","slug":"LeetCode 59","date":"2021-07-28T08:21:12.458Z","updated":"2021-07-28T08:32:31.022Z","comments":true,"path":"2021/07/28/LeetCode 59/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2059/","excerpt":"","text":"LeetCode 59 概述 ​ 输入n，在n*n的矩阵中，从左上角开始，逆时针填入数字1-n2,然后输出矩阵 思路 首页，应该能知道这题是一个模拟题 手动模拟操作，可以发现，顺序上-右-下-左都是一样的，只是规模再变小。所以一次大循环里面，应该是把四个方向的任务完成。 还要注意的是边界的选取，因为上-右、右-下、下-左，均是存在一个重叠的数字的。这里选择左闭右开，是因为每次处理一个方向后，循环变量还会加一， 所以干脆直接将加一利用起来，再之后的方向继续使用，减少操作 12345678910111213141516171819202122232425262728293031vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) &#123; vector&lt;vector&lt;int&gt; &gt; result(n, vector&lt;int&gt;(n, 0)); int loop=n/2; //一次一圈，所以除2 int startx=0,starty=0; //记录起始位置 int i,j; int ans=1; //数字增量 int offset=1; //相同循环操作的偏移量 while(loop--)&#123; i=startx; j=starty; for(;j&lt;n-offset+startx;j++) //注意j的范围是要有偏移量的 result[i][j]=ans++; //因为采用左闭右开，所以j最后加出来的数，可以在下面的循环里直接用 for(;i&lt;n-offset+startx;i++) result[i][j]=ans++; for(;j&gt;starty;j--) result[i][j]=ans++; for(;i&gt;startx;i--) result[i][j]=ans++; //下一轮作准备 startx++; starty++; //起始位置改变 offset+=2; //偏移量改变 &#125; if (n%2) &#123; //n是奇数，则存在一个正中间数会少loop一次，需要额外处理 result[n/2][n/2] = ans; &#125; return result; &#125;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 34","slug":"LeetCode 34","date":"2021-07-28T08:21:12.455Z","updated":"2021-07-28T08:30:47.859Z","comments":true,"path":"2021/07/28/LeetCode 34/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2034/","excerpt":"","text":"LeetCode 34 概述 ​ 题目给定一个升序数组，又要求时间复杂度O(log n)算法，考虑二分解决 思路1 一般二分查找，只能找到其中一个target，现在要找target在数组中的开始位置和终止位置，考虑每次找到后将数组分成左右两个，那么开始、终止位置也就可能在左右两边。 对左右两边，可以继续二分查找，直到找不到停止。到这里，考虑递归思想。 对于递归函数，返回值应该就是最终的结果，还要注意临界条件。 123456789101112131415161718192021222324class Solution &#123;public: vector&lt;int&gt; find(vector&lt;int&gt;&amp; nums,int target,int l,int r)&#123; //这里l,r就是用来记录最终结果用 while(r&gt;=l)&#123; int mid=(l+r)/2; if(nums[mid]&gt;target) r=mid-1; else if(nums[mid]&lt;target) l=mid+1; else&#123; //找到一个边界target if(nums[l]!=target) //如果最左边不等于target l=find(nums,target,l+1,mid)[0]; //左边往后移动，只取数组第一个结果 if(nums[r]!=target) //如果最右边不等于target r=find(nums,target,mid,r-1)[1]; //右边后前移动 return vector&lt;int&gt;&#123;l,r&#125;; &#125; &#125; //如果找不到 return vector&lt;int&gt;&#123;-1,-1&#125;; &#125; vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123; return find(nums,target,0,nums.size()-1); &#125;&#125;; 思路二 考虑到传入的是vector类型，而c++STL中存在一个二分查找的算法equal_range,可以使用该函数 equal_range：试图在已排序的[first,last)中寻找value，它返回一对迭代器i和j，其中i是在不破坏次序的前提下，value可插入的第一个位置（亦即lower_bound），j则是在不破坏次序的前提下，value可插入的最后一个位置（亦即upper_bound） 12345678class Solution &#123;public: vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123; auto bound=equal_range(nums.begin(),nums.end(),target); if(bound.first==bound.second) return &#123;-1,-1&#125;; //两个迭代器 first second return &#123;(int)(bound.first-nums.begin()),(int)(bound.second-nums.begin())-1&#125;; //通过迭代器相减 q &#125;&#125;;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 19","slug":"LeetCode 19","date":"2021-07-28T08:21:12.451Z","updated":"2021-07-28T08:30:45.278Z","comments":true,"path":"2021/07/28/LeetCode 19/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2019/","excerpt":"","text":"LeetCode 19 概述 思路","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 18","slug":"LeetCode 18","date":"2021-07-28T08:21:12.448Z","updated":"2021-07-28T08:30:42.335Z","comments":true,"path":"2021/07/28/LeetCode 18/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2018/","excerpt":"","text":"LeetCode 18 概述 https://leetcode-cn.com/problems/4sum/ 给你一个数组和一个目标值target，判断数组中是否能找到四个不同位置的值相加等于target 答案中不包含重复的集合 思路 和之前[3Sum](LeetCode 15.md)基本相同，只是需要四个数字 指针数：2个活动指针+2个固定移动指针 12345678910111213141516171819202122232425262728293031class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) &#123; vector&lt;vector&lt;int&gt;&gt; result; sort(nums.begin(),nums.end()); int L=nums.size(); for(int i=0;i&lt;L;i++)&#123; //if(nums[i]&gt;target) continue; 这个剪枝是错误的 if(i&gt;0&amp;&amp;nums[i]==nums[i-1]) continue; //相同的去重操作 for(int j=i+1;j&lt;L;j++)&#123; //两个固定指针，两重循环 if(j&gt;i+1&amp;&amp;nums[j]==nums[j-1]) continue; //注意一下第二重循环的去重条件 int left=j+1; int right=L-1; while(right&gt;left)&#123; if((long long )nums[i]+nums[j]+nums[left]+nums[right]&gt;target) //这里的类型v right--; else if((long long )nums[i]+nums[j]+nums[left]+nums[right]&lt;target) left++; else&#123; result.push_back(vector&lt;int&gt;&#123;nums[i], nums[j], nums[left],nums[right]&#125;); while(nums[right]==nums[right-1]&amp;&amp;right&gt;left) right--; while(nums[left]==nums[left+1]&amp;&amp;right&gt;left) left++; right--; left++; &#125; &#125; &#125; &#125; return result; &#125;&#125;; ​ ​","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 15","slug":"LeetCode 15","date":"2021-07-28T08:21:12.445Z","updated":"2021-07-28T08:30:39.790Z","comments":true,"path":"2021/07/28/LeetCode 15/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%2015/","excerpt":"","text":"LeetCode 15 概述 https://leetcode-cn.com/problems/3sum 从一个数组中，找到所有的三个不同位置的数字，相加等于0 返回所有的相加等于0的三个数字，且结果不重复 思路 理解题目要求，三个数字位置要不同,三个数字组成的结果不重复，最后按组返回所有的三个数字 返回最终集合不能重复，所以这题不好用哈希法，因为哈希会把所有的结果都选出来，那么就可能三个数字组成的集合是重复的 所以，考虑多指针法，而正好题目只需我们返回最终的值，那么可以将数据排序 如何确定指针数？ 首页一个排好序的数组，指针的移动方向就两个——前、后，所以移动指针可以有两个 这题要求选三个，所以我们当然要选三个指针指向最终的结果 如何去重？ 因为排好序，所以相同的数据都集中在一起，只需判断此时的数据和之前的数据是否相同 如果相同，则不处理该数据； 12345678910111213141516171819202122232425262728293031class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123; vector&lt;vector&lt;int&gt;&gt; result; sort(nums.begin(),nums.end()); //排序 int L=nums.size(); for(int i=0;i&lt;L;i++)&#123; if(nums[i]&gt;0) //剪枝 break; int j=i+1; int k=L-1; if(i&gt;0&amp;&amp;nums[i]==nums[i-1]) continue; //去重 while(k&gt;j)&#123; if(nums[i] + nums[j] + nums[k]&gt;0) //移动指针 k--; else if(nums[i] + nums[j] + nums[k]&lt;0) j++; else&#123; result.push_back(vector&lt;int&gt;&#123;nums[i], nums[j], nums[k]&#125;); //获得结果 while(nums[k]==nums[k-1]&amp;&amp;k&gt;j) k--; //去重 while(nums[j]==nums[j+1]&amp;&amp;k&gt;j) j++; //继续寻找 j++; k--; &#125; &#125; &#125; return result; &#125;&#125;;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"LeetCode 1","slug":"LeetCode 1","date":"2021-07-28T08:21:12.441Z","updated":"2021-07-28T08:30:35.274Z","comments":true,"path":"2021/07/28/LeetCode 1/","link":"","permalink":"https://syy-99.github.io/2021/07/28/LeetCode%201/","excerpt":"","text":"LeetCode 1 概述 https://leetcode-cn.com/problems/two-sum/ 给定一个整数数组和一个target,从数组中选择两个相加等于target的值，返回选择的两个的数组下标 同一个元素不能被重复选,且只会有一个结果 思路 返回下标，说明不能排序，那么不能使用多指针法； 题目只是要求，同一个元素不能被重复选，并没有说最终结果中不能有重复的元素，所以可以使用哈希法或find()函数 123456789101112//方法一 find()函数找，时间复杂度高vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; for(int i=0;i&lt;nums.size();i++)&#123; int temp=target-nums[i]; auto index=find(nums.begin(),nums.end(),temp); int t=index-nums.begin(); if(index!=nums.end()&amp;&amp;t!=i)&#123; //确保不是同一元素 return &#123;i,t&#125;; &#125; &#125; return &#123;0,0&#125;; &#125; 1234567891011121314//方法二 哈希法vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; unordered_map&lt;int,int&gt; mp; for(int i=0;i&lt;nums.size();i++)&#123; mp[nums[i]]=i+1; //记录索引，这题题目明确说 只有一个答案才可以这样做的 &#125; for(int i=0;i&lt;nums.size();i++)&#123; int temp=mp[target-nums[i]]; if(temp!=0&amp;&amp;temp-1!=i)&#123; / return &#123;i,temp-1&#125;; &#125; &#125; return &#123;&#125;;&#125; 12345678910111213141516 /*官方题解 哈希 注意和自己的方法二的不同，方法二是针对此题明确一个答案才可以那样。 因为法二在记录索引是，相同的nums[i]的值会被覆盖，之会存在一个索引。 但是，因为只有一个答案，所以如果有相同的值，那么要么是用不到的，要么一定是两个相同值就是最终的答案；否则不可能只有一个解 */vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; unordered_map&lt;int, int&gt; hashtable; for (int i = 0; i &lt; nums.size(); ++i) &#123; auto it = hashtable.find(target - nums[i]); if (it != hashtable.end()) &#123; return &#123;it-&gt;second, i&#125;; &#125; hashtable[nums[i]] = i; &#125; return &#123;&#125;; &#125;","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"c++函数使用记录","slug":"c++函数使用记录","date":"2021-07-28T08:21:12.438Z","updated":"2021-07-28T08:32:10.954Z","comments":true,"path":"2021/07/28/c++函数使用记录/","link":"","permalink":"https://syy-99.github.io/2021/07/28/c++%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","excerpt":"","text":"c++函数使用记录 STL 函数 equal_range()：一个二分查找的算法，试图在已排序的[first,last)中寻找value，它返回一对迭代器i和j。 如果该键值在容器中存在，则i是在不破坏次序的前提下，value可插入的第一个位置（亦即lower_bound），j是在不破坏次序的前提下，value可插入的最后一个位置（亦即upper_bound）；如果找不到，则i,j都指向此键值应该插入的位置。 C++11 简便写法 auto bounds = equal_range(nums.begin(), nums.end(), target); 可以将其看做lower_bound和upper_bound的结合 vector map都可以用 12vector: equal_range(nums.begin(), nums.end(), target);map: distance()：计算迭代器之间的距离 1int dis=distance(nums.begin(),nums.end() remove()：移除区间{beg,end)中每一个“与value相等”的元素。最后remove返回指向“目标数列”的end()的迭代器 只会移动元素，并且也不是将vlaues移到最后面去 1vcetor:remove(nums.begin(),nums.end(),value); Remove_if()：移除区间[beg,end)中每一个“令判断式获得true”的元素 12bool isValue(int x) &#123; return x==target; &#125;vcetor:remove(nums.begin(),nums.end(),isValue); erase():删除容器中的某些元素，返回经过删除操作后的容器 12erase(iter);erase(iter.begin,iter.end) /** iter代表迭代器 **/ fill()：为某容器某个区间赋相同值 1vcetor:fill(nums.begin(),nums.end(),0); find(first, end, value)：返回区间[first，end）中第一个值等于value的元素位置；若未找到，返回end。函数返回的是迭代器或指针，即位置信息 如果查找整个区间，可以直接xx.find(value) reverse(begin,end)：反转 多用于string、vector replace(begin,end,x,xx):在容器[being,end)范围内，将所有的x替换为xxx replace_if(being,end,条件判断,xxx) String 函数 str.replace() 12str.replace(pos,2,&quot;#&quot;) //从位置pos开始的两个字符替换成#str.replace(begin(),end(),&quot;#&quot;) //[begin,end)的字符替换成&quot;#&quot; str.substr(begin,length)：从索引begin开始，截取长度为length的字符 stoi(stirng s)：将用字符串表示的数字转换为Int 非数字字符转换会报错","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++函数","slug":"C-函数","permalink":"https://syy-99.github.io/tags/C-%E5%87%BD%E6%95%B0/"}]},{"title":"语法总结","slug":"语法总结——队列","date":"2021-07-28T08:21:00.582Z","updated":"2021-07-28T08:32:02.059Z","comments":true,"path":"2021/07/28/语法总结——队列/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/","excerpt":"","text":"语法总结——队列 队列 优先队列 头文件 #include&lt;queue&gt; 特点 在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先删除。优先队列具有最高级先出 （first in, largest out）的行为特征 优先队列具有队列的所有特性，包括队列的基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的 定义 123456/*Type： 数据类型Container: 容器类型（必须是用数组实现的容器，vector,deque等，不能用List）Functional: 比较的方式*/priority_queue&lt;Type, Container, Functional&gt; 对于基本类型，默认使用大顶堆 示例: 1234priority_queue&lt;int&gt; a;priority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q; //主动声明 小顶堆priority_queue&lt;string&gt; bpriority_queue&lt;pair&lt;int, int&gt; &gt; a //pair先比较第一个 基本操作函数 函数 作用 top 访问队头元素 empty 队列是否为空 size 返回队列内元素个数 push 插入元素到队尾 (并排序) pop 弹出队头元素 swap 交换内容 进阶操作 自定义类型 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//方法1struct tmp1 //运算符重载&lt;&#123; int x; tmp1(int a) &#123;x = a;&#125; bool operator&lt;(const tmp1&amp; a) const //注意这里重载 &lt; &#123; return x &lt; a.x; //大顶堆 &#125;&#125;;//方法2struct tmp2 //重写仿函数&#123; bool operator() (tmp1 a, tmp1 b) //这里重载() &#123; return a.x &lt; b.x; //大顶堆 &#125;&#125;;int main()&#123; tmp1 a(1); tmp1 b(2); tmp1 c(3); priority_queue&lt;tmp1&gt; d; d.push(b); d.push(c); d.push(a); while (!d.empty()) &#123; cout &lt;&lt; d.top().x &lt;&lt; &#x27;\\n&#x27;; d.pop(); &#125; cout &lt;&lt; endl; priority_queue&lt;tmp1, vector&lt;tmp1&gt;, tmp2&gt; f; f.push(b); f.push(c); f.push(a); while (!f.empty()) &#123; cout &lt;&lt; f.top().x &lt;&lt; &#x27;\\n&#x27;; f.pop(); &#125;&#125; 扩展阅读 c++优先队列(priority_queue)用法详解","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"C++队列","slug":"C-队列","permalink":"https://syy-99.github.io/tags/C-%E9%98%9F%E5%88%97/"}]},{"title":"语法总结——C++11","slug":"语法总结——C++ 11","date":"2021-07-28T08:21:00.568Z","updated":"2021-07-28T08:31:43.924Z","comments":true,"path":"2021/07/28/语法总结——C++ 11/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94C++%2011/","excerpt":"","text":"语法总结——C++ 11 使用emplace操作 新函数 对应之前函数 emplace(i, type) insert(type, i) emplace_front push_front emplace_back push_back emplace是构造而不是拷贝元素，不需要拷贝或者移动内存。 如果元素是基本类型，新特性就没有体现，也就没有优势 所有的标准库容器（array除外，因为它的长度不可改变，不能插入元素）都增加了类似的方法 使用示例 12S.push_back(data(1,2)) //让其构造函数构造好了对象之后，再使用复制构造函数S.emplace(1,2) //emplace这样接受新对象的时候，自己会调用其构造函数生成对象然后放在容器内（比如这里传入了1，2，它则会自动调用一次data(1,2))","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"C++ 11","slug":"C-11","permalink":"https://syy-99.github.io/tags/C-11/"}]},{"title":"刷题总结——字符串的各种反转及应用","slug":"刷题总结——字符串的各种反转及运用","date":"2021-07-28T08:21:00.566Z","updated":"2021-07-28T08:29:58.620Z","comments":true,"path":"2021/07/28/刷题总结——字符串的各种反转及运用/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%8D%E8%BD%AC%E5%8F%8A%E8%BF%90%E7%94%A8/","excerpt":"","text":"刷题总结——字符串的各种反转及运用","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"刷题总结——字符串KMP算法分析与应用","slug":"刷题总结——字符串的KMP算法分析与使用","date":"2021-07-28T08:21:00.550Z","updated":"2021-07-28T08:29:29.085Z","comments":true,"path":"2021/07/28/刷题总结——字符串的KMP算法分析与使用/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84KMP%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8/","excerpt":"","text":"刷题总结——字符串的KMP算法分析与应用 概述 KMP的经典思想就是：当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。 如何记录已经匹配的文本内容，是KMP的重点，也是next数组肩负的重任 next数组：前缀表（prefix table） 前缀表是用来回退的，它记录了模式串(与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配 记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀 最长相等前后缀 前缀：指不包含最后一个字符的所有以第一个字符开头的连续子串 后缀：指不包含第一个字符的所有以最后一个字符结尾的连续子串 前缀表要求的就是相同前后缀的长度 如何构造前缀表和next数组 前缀表中记录了模式串中每个位置从 [0,位置] 的最长相等前后缀的长度 前缀表的长度等于模式串 当在 模式表i 处发生不匹配时，只需找到前缀表中i-1的位置处的值，即可知道下次匹配从模式表[前缀表[i-1]]处开始 为了简便，通常会将前缀表向右移动并赋初值为-1，得到next数组,这样下次匹配就是模式表[next[i]] 123456789101112131415161718192021/*构造nextu1. 初始化2. 处理前后缀不同的情况3. 处理前后缀相同的情况整个算法有点动态规划的味道，在前一段完成的基础上，获得下一段的情况*/void getNext(int* next, const string&amp; s) &#123; next[0] = -1; //先给next[0]赋初值,必定是-1 int j = 0; int k=-1; //记录s[0]-s[j-1]最长相等前缀的后一个位置 while(j&lt;s.length()-1)&#123; //因为我们是使用右移的next数字，所以循环的j实际上是给j+1赋值 if(k==-1||s[j]==s[k])&#123; //这里加k==-1这个条件，实际上也是一个给next[1]赋初值的条件，因为s[1]不匹配的话，只能用s[0]l来匹配， //如果s[j+1]不匹配,考虑0-j的字符串,当s[k]==s[j]时,0-j字符串的k应该是k+1，所以s[j+1]=k+1（之后为了下次循环，k，j也要往前移动一位） j++;k++; next[j]=k; &#125;else&#123; //如果s[j+1]不匹配时，考虑0-j的字符串，当s[j]!=s[k]，0-j的最长相等前缀位置不是k(因为k是0-j-1的)，所以要更新这次的k。因为k是0-j-1的最长相等前缀的后一个位置，所以s[j]!=s[k]最长前缀只可能在0-k-1中出现，那么next[k]就应该是下一个去匹配的位置，进入下一次循环判断直到有s[k]==s[j],那么此时的k就是0-j处的最长前缀的后一个位置 k=next[k]; &#125; &#125;&#125; 题目练习 在一个串中查找是否出现过另一个串 28.Implement strStr() next数组可以优化 1next[j]=s[j]!=s[k]?k:next[k]//next数组优化，避免s[j+1]发生不匹配时，下一个s[next[j+1]]==s[j+1]继续不匹配，需要继续往下匹配 扩展阅读 详解KMP算法","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"刷题总结——多指针法","slug":"刷题总结——多指针法","date":"2021-07-28T08:21:00.538Z","updated":"2021-07-28T08:27:57.789Z","comments":true,"path":"2021/07/28/刷题总结——多指针法/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%A4%9A%E6%8C%87%E9%92%88%E6%B3%95/","excerpt":"","text":"刷题总结——多指针法 概述 双指针法基本都是应用在数组，字符串与链表的题目上 一般题目要求空间复杂度为O(1)，但要对数组等进行操作，可以考虑使用该方法 思路 一般常用的双指针法： 快慢双指针：同一方向移动，但是速度不同 前后双指针：不同方向移动 工作指针+标识指针：标识指针的移动取决于工作指针 特殊情况下也有多指针法，需要具体问题具体分析 题目练习 数组——移除元素 工作指针+标识指针 [27.Remove Element](26. Remove Duplicates from Sorted Array) [26.Remove Duplicates from Sorted Array](26. Remove Duplicates from Sorted Array)—2021.7.3 283.Move Zeroes 844.Backspace String Compare—2020.7.5 977.Squares of a Sorted Array","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"刷题总结——多数想加（减）等于特定值","slug":"刷题总结——多数相加（减）等于特定值","date":"2021-07-28T08:21:00.434Z","updated":"2021-07-28T08:29:05.064Z","comments":true,"path":"2021/07/28/刷题总结——多数相加（减）等于特定值/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%A4%9A%E6%95%B0%E7%9B%B8%E5%8A%A0%EF%BC%88%E5%87%8F%EF%BC%89%E7%AD%89%E4%BA%8E%E7%89%B9%E5%AE%9A%E5%80%BC/","excerpt":"","text":"刷题总结——多数相加（减）等于特定值 概述 存在一类题目，给你一些数组（可能是一个，也可能是多个），给你一个target，要求你从给定的数据中，选择一些数相加（减）等于target 思路 这类算是排列组合题。如果暴力求解，就直接多重循环将数字排列组合验证即可(一般会超时) 但是考虑到已知target,我们可以先排列组合部分获得值，然后根据结果去找接下来需要应该要获得的值 重点就是如何确定数据中是否存在应该要获得的值 一种情况，可以利用find()函数 STL find()时间复杂度是O(n) map、set成员函数find()是O(logn) 另一种情况，可以利用哈希，空间换时间，缩小时间复杂度 先将排列组合的值保存下来，减少循环层数 此类题目可能存在的不同要求： 最终结果获得的值不能重复：那么在找的过程中，要确保找到的数字是之前部分结果中没有使用过的，此时哈希法不太好用，可以考虑多指针法 多指针法，一般要对数据进行排序，所以也不适用需要最后返回索引的问题 题目分析 同一集合中找数据+返回数据索引 [1.Two Sum](LeetCode 1.md/) 同一集合中找数据+返回结果数值 [15.3Sum](LeetCode 15.md) 18.4Sum 不同集合中找数据+返回结果数量 454.4Sum II","categories":[{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"刷题记录——LeetCode","slug":"刷题记录——LeetCode","date":"2021-07-28T08:17:24.726Z","updated":"2021-07-28T08:31:33.408Z","comments":true,"path":"2021/07/28/刷题记录——LeetCode/","link":"","permalink":"https://syy-99.github.io/2021/07/28/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94LeetCode/","excerpt":"","text":"刷题记录——LeetCode 数组 二分法 适用情况 在一组有序数字中，进行查找操作 注意 根据不同的情况，要对while的循环条件和里面的if选择条件进行修改 基本格式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556```**题目练习**- [704. Binary Search](https://leetcode-cn.com/problems/binary-search/)- [35. Search Insert Position](https://leetcode-cn.com/problems/search-insert-position/)- [34. Find First and Last Position of Element in Sorted Array](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)(==题解==)---2021.7.1- [69. Sqrt(x)](https://leetcode-cn.com/problems/sqrtx/)（==题解==）----2021.7.2- [367. Valid Perfect Square](https://leetcode-cn.com/problems/valid-perfect-square/)---2021.7.3### 快慢指针法----移除元素**适用情况**- 在有序数组中，需要移动元素位置（包括移除、移动元素）**注意**- 不同的移除条件，循环里有不同的写法**题目练习**- [27.Remove Element]([26. Remove Duplicates from Sorted Array](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/))- [26.Remove Duplicates from Sorted Array]([26. Remove Duplicates from Sorted Array](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/))---2021.7.3- [283.Move Zeroes](https://leetcode-cn.com/problems/move-zeroes/)- [844.Backspace String Compare](https://leetcode-cn.com/problems/backspace-string-compare/)---2020.7.5- [977.Squares of a Sorted Array](https://leetcode-cn.com/problems/squares-of-a-sorted-array/)### 滑动窗口**适用情况**- 查找连续子数组问题，不断的调节子序列的起始位置和终止位置，从而得出我们想要的结果- 特殊情况也可使用前缀和思想**注意**- 根据要求，设计每次窗户扩展后的处理方法非常关键**模版**```c++根据题目，for循环内窗口扩展操作作准备int i=0; //窗口起始位置int result=？ //看情况初值（最大或最小），保存每次结果和最终结果for（int j=0;j&lt;size;j++)&#123; //滑动窗口开始扩展 根据题目要求，设计每次窗户扩展的处理操作并保存记录 while(窗口操作后的记录的临界情况)&#123; //记录数据，并开始滑动窗口 int ans=j-i+1; //此时窗口大小 result=result&gt;ans?result:ans; //根据要求写判断逻辑 窗口起始位置向前滑动后对记录的影响 i++; //窗口起始位置向前滑动 &#125;&#125; 题目练习 209.Minimum Size Subarray Sum—2021.7.6 前缀和 O(nlogn) 904.Fruit Into Baskets–2021.7.7 76.Minmum Window Substring(题解)—2021.7.8 其它 59.Spiral Matrix II(题解)—2021.7.9 链表 用while循环遍历链表时，要根据自己的处理逻辑，选择是用while(node-&gt;next)还是while(node)，一般来说如果能确定进入循环前的node必有值的话，就用前一个，否则用后一个 虚拟头结点 适用情况 一般来说，如果对单链表进行操作，除头结点外结点操作基本相同，那么可以添加一个虚拟头结点，使得原头结点变成子节点，统一操作 注意 工作指针指向虚拟头结点后，要从node-&gt;next开始判断 返回vir_head-&gt;next才是真正头指针 模板 123ListNode* vir_head=new ListNode(); //初始化虚拟结点vir_head-&gt;next=head; //构造虚拟头结点ListNode* node=vir_head; //工作指针从虚拟结点开始 题目练习 203.Remove Linked List Elements 707.Design Linked List—2021.7.10 24.Swap Nodes in Pairs—2021.7.12 链表翻转 方法 头插法：新建一个虚拟头结点，利用头插法构造逆序链表 双指针法：利用前后指针，将next的指向逆转过来 题目练习 206.Reverse Linked List(笔记)—20217.11 双指针法——一遍找倒数位置元素 注意 要确定last、fast指针的距离，以及要选择最后fast是走到最后一个位置处，还是走到null处时，此时的fast的位置到底是不是符合要求的 题目 19.Remove Nth Node From End of List（笔记）—2021.712 双指针法——找链表相交结点位置 注意 要先确定两个指针的距离，然后同步移动找到指针值相同的结点即可 题目 面试题02.07.链表相交 环形链表——确定环及环入口位置 注意 根据快慢指针找环 环的入口位置需要数学证明 题目 [142.Link List Cycle II（题解）—2021.7.13 哈希表 适用情况 需要记录元素出现的次数–map 需要记录元素是否出现过–set\\map 注意 如果数据比较少，key可以用int且最大值不大，直接用数组即可 如果数据比较少，但特别分散、跨度大，可以用unordered_map 如果只是需要记录是否出现过，可以用unordered_set作集合操作，用find判断 也可用map只读一次数据 题目 242.Vaild Anagram 349.intersection-of-two-arrays—2021.7.14 202.Happy Number 1.Two Sum—2021.7.15 454.4Sum II 383.Ransom Note—2021.7.16 15.3Sum 18.4Sum 扩展阅读 C++ multimap查找相同键的键值对方法 字符串 反转 题目 344.Reverse String—2021.7.19 541.Reverse String II —2021.7.20 151.Reverse Wrods in a String 剑指Offer 58-II 左旋转字符串—2021.7.21 28.Implement strStr—2021.7.22 459.Repeated Sbustring Pattern(无思路)（好好研究）—2021.7.23 栈和队列 预备知识 栈、队列是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的。STL中栈的队列往往不被归类为容器，而被归类为container adapter（容器适配器） 注意 stack.pop()返回值是void,stack.top()返回值才是具体数值 应用类型 对称匹配类问题——栈 两个元素匹配，匹配后可再有操作 题目练习 232.Implement Queue using Stacks 225.Implement Stack using Queues—2021.7.24 20.Vaild Parentheses 1047.Remove All Adjacent Duplicates In String—2021.7.26 150.Evaluate Reverse Polish Notation—2021.7.27 239.Sliding Window Maximum（题解问题）—2021.7.28","categories":[{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"}]},{"title":"3.远程仓库","slug":"3.远程仓库","date":"2021-07-27T00:48:46.576Z","updated":"2021-08-03T03:32:59.258Z","comments":true,"path":"2021/07/27/3.远程仓库/","link":"","permalink":"https://syy-99.github.io/2021/07/27/3.%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/","excerpt":"","text":"远程仓库 配置SSH 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的、 第1步：创建SSH Key。打开Shell（Windows下打开Git Bash），创建SSH Key： 12345cd ~/.ssh //检查本机是否有ssh,如果提示没有则需要创建ssh-keygen -t rsa -C &quot;youremail@example.com&quot; //创建ssh,一路回车，使用默认值即可cd ~/.ssh //进入文件ll //查看是否存在有id_rsa（私匙）和id_rsa.pub（公匙）两个文件cat id_rsa.pub //查看公匙 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面 点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容 GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。 本地仓库关联远程仓库 命令 git remote add origin &lt;仓库地址&gt;：连接远程仓库 仓库地址选择git开头的那个 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的 git push -u &lt;远程仓库名&gt; &lt;本地分支名&gt;：将当前本地仓库分支推送到远程仓库 -u：第一次推送master分支时，加上-u参数，Git不但会把本地的main分支内容推送的远程新的main分支，还会把本地的main分支和远程的main分支关联起来，在以后的推送或者拉取时就可以简化命令,直接使用git push &lt;本地分支名&gt;:&lt;远程分支名&gt;：推送到远程仓库的分支重新命名 git remote rm &lt;远程仓库名&gt;：解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动 git remote -v：查看远程库信息 克隆远程库 命令 git clone &lt;仓库地址&gt;","categories":[{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"}]},{"title":"2.本地仓库","slug":"2.本地仓库","date":"2021-07-27T00:48:46.069Z","updated":"2021-08-03T03:32:55.128Z","comments":true,"path":"2021/07/27/2.本地仓库/","link":"","permalink":"https://syy-99.github.io/2021/07/27/2.%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/","excerpt":"","text":"本地仓库 仓库版本控制 git status：查看本地仓库状态 git diff：查看仓库和之前版本的区别 git log：显示从最近的最远的提交日志 --grapt：显示分支合并图 --pretty=oneline：简化日志信息，将每个提交放在一行显示，查看的提交数很大时非常有用 git reset --hard xxx：回退仓库版本xxx xxx Git中用head表示当前版本，上个版本是head^，上上个版本是head^^,也可用head~10来表示上10个版本 直接用git log中提交commit id（版本号）前几位 git reflog：记录使用的每一次命令 工作区和暂存区 工作区：就是你在电脑里能看到的目录 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库 版本库中存在一个称为stage(或index)的暂存区，还有Git为为我们自动创建的第一个分支main，以及指向master的一个指针叫HEAD 我们把文件往Git版本库里添加的时候，是分两步执行的： 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区； 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改 管理修改 为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件 git每次都会对仓库内发生的修改情况进行记录，只要存在修改就会存在记录 考虑这样一种情况：第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit add会将第一次修改提交到暂存区，commit只会将暂存区的文件提交 但是这并不意味着第二次修改不存在了，我们可以再进行add后再提交，仍然可以提交第二次修改 撤销修改 git checkout 可以用来新建或者切换分支， 也可以用来回退文件版本 从 Git 2.23 版本开始引入了两个新的命令： git switch 切换分支 git restore：还原工作区的文件 --staged:将暂存区的文件从暂存区撤出，但不会更改文件的内容 如果文件还未add,那么不需要加上面参数；如果一级add,那么回退顺序应该是先回退暂存区，再回退文件（直接回退文件是没用的） 如果修改被commit了，那么只能回退版本 删除文件 一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了 这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了 现在你有两个选择， 一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit 或者用git add &lt;file&gt;删掉 另一种情况是删错了，因为版本库里还有，所以当然可以撤销修改 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！","categories":[{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"}]},{"title":"1.Git简介","slug":"1.Git简介","date":"2021-07-27T00:48:45.792Z","updated":"2021-08-03T03:32:51.610Z","comments":true,"path":"2021/07/27/1.Git简介/","link":"","permalink":"https://syy-99.github.io/2021/07/27/1.Git%E7%AE%80%E4%BB%8B/","excerpt":"","text":"Git简介 Git起源 在2002年以前，世界各地的志愿者把源代码文件通过==diff[1]==的方式发给Linus，然后由Linus本人通过手工方式合并代码 到了2002年,Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统 2005,Linux社区牛人试图破解BitKeeper的协议，BitMover公司要收回Linux社区的免费使用权 Linus花了两周时间自己用C写了一个分布式版本控制系统——Git！一个月之内，Linux系统的源码已经由Git管理了 版本控制系统 [2] 集中式： 集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。 集中式版本控制系统最大的毛病就是必须联网才能工作，受限于网速 分布式： 分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，工作的时候，就不需要联网 个人的对库文件的修改只需通过局域网推送给对方即可看到 分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已 Git是目前世界上最先进的分布式版本控制系统[3] 安装Git Linux：直接用命令行安装 Win：在官网下载安装程序，并配置机器名字和地址 具体操作互联网搜索即可 第一次安装需要配置 1git config --global user.name &quot;xxx&quot; 版本库 版本库（repository)：可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原” 操作过程 git init：在指定目录中使用，可以将该目录变成Git可以管理的仓库 会在该目录下生成一个.git目录，是Git用来跟踪管理版本库的，一般不需改动 该仓库是一个本地仓库 git add xxx：把位于指定目录的文件添加到仓库 git commit -m &quot;xxx&quot;：将文件提交到仓库 一次commit会将之前所有的add都会提交 扩展阅读 百科-版本控制 集中式（SVN）和分布式（Git）版本控制系统的简单比较 diff 命令比较文本文件,它能比较单个文件或者目录内容。 ↩︎ 一种软体工程技巧，籍以在开发的过程中，确保由不同人所编辑的同一档案都得到更新。版本控制透过文档控制(documentation control)记录程序各个模组的改动，并为每次改动编上序号 ↩︎ 每个人都可以创建一个独立的代码仓库用于管理，各种版本控制的操作都可以在本地完成。每个人修改的代码都可以推送合并到另外一个代码仓库中 ↩︎","categories":[{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"}]}],"categories":[{"name":"杂项","slug":"杂项","permalink":"https://syy-99.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"name":"Git学习","slug":"Git学习","permalink":"https://syy-99.github.io/categories/Git%E5%AD%A6%E4%B9%A0/"},{"name":"刷题记录","slug":"刷题记录","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"name":"刷题笔记","slug":"刷题笔记","permalink":"https://syy-99.github.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"杂","slug":"杂","permalink":"https://syy-99.github.io/tags/%E6%9D%82/"},{"name":"Github","slug":"Github","permalink":"https://syy-99.github.io/tags/Github/"},{"name":"LeetCode刷题","slug":"LeetCode刷题","permalink":"https://syy-99.github.io/tags/LeetCode%E5%88%B7%E9%A2%98/"},{"name":"C++","slug":"C","permalink":"https://syy-99.github.io/tags/C/"},{"name":"C++函数","slug":"C-函数","permalink":"https://syy-99.github.io/tags/C-%E5%87%BD%E6%95%B0/"},{"name":"C++队列","slug":"C-队列","permalink":"https://syy-99.github.io/tags/C-%E9%98%9F%E5%88%97/"},{"name":"C++ 11","slug":"C-11","permalink":"https://syy-99.github.io/tags/C-11/"}]}